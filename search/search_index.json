{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Devnote","text":"<p>Where my software developing journey lies.</p>"},{"location":"debug-page/","title":"A","text":""},{"location":"debug-page/#b","title":"B","text":""},{"location":"debug-page/#c","title":"C","text":""},{"location":"debug-page/#d","title":"D","text":""},{"location":"debug-page/#e","title":"E","text":""},{"location":"debug-page/#f","title":"F","text":""},{"location":"making/","title":"Making this site","text":"2020-08-21 <p>This is my first website which may be 'quite useful'. I've always taken lots of time configuring as if I were working on such a huge project.</p> <p>So I forgave and used MkDocs. (and Material for MkDocs). I wanted to make something instantly and showed me it as soon as.</p> <p>The reason I made this:</p> <ul> <li>some portfolio?</li> <li>to remember; I may forget all of this without writing down</li> <li>contributing to public goods(?)</li> </ul> <p>If you want a professional, precise document, you may leave this website. I'm just a student in Korea; poor at English, develop for fun.</p>"},{"location":"android/transparent-status-bar/","title":"Transparent status bar in Android","text":"<p>I didn't like that if I want to something a little complex, I need to google all around, and common example for this is handling status bar and navigation bar, or handling insets in common. Also I wanted to use Compose for these thingy.</p> <p>Once I wanted to implement Full Screen Dialog, which lays below system insets. I googled around, but I found some do not fit for modern Android framework as they are deprecated.</p>"},{"location":"android/transparent-status-bar/#tl-dr","title":"TL; DR","text":"<ol> <li>Insert the following style into your dialog style.</li> </ol> <pre><code>&lt;style name=\"AppTheme.Dialog\"&gt;\n&lt;item name=\"android:windowDrawsSystemBarBackgrounds\"&gt;true&lt;/item&gt;\n&lt;item name=\"android:windowBackground\"&gt;@null&lt;/item&gt;\n&lt;item name=\"android:windowFrame\"&gt;@null&lt;/item&gt;\n&lt;item name=\"android:windowIsFloating\"&gt;false&lt;/item&gt;\n&lt;item name=\"android:windowContentOverlay\"&gt;@null&lt;/item&gt;\n&lt;item name=\"android:windowAnimationStyle\"&gt;@android:style/Animation.Dialog&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>Vital items are:</p> <ul> <li><code>android:windowDrawsSystemBarBackgrounds</code>: Enables drawing under system bar.</li> <li><code>android:windowFrame</code>: If dialog frame exists, it won't fill the whole screen.</li> <li> <p><code>android:windowIsFloating</code>: <code>true</code> value of this enforces window insets not to be passed   to views, causing Window itself consuming it with color.</p> </li> <li> <p>In your dialog code, put the following code.</p> </li> </ul> <pre><code>window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT)\nWindowCompat.setDecorFitsSystemWindows(window, false)\n</code></pre> <p><code>WindowCompat.setDecorFitsSystemWindows</code> will fall back to setting system ui visibility under Android API 30, so you don't need to write system ui ones by yourself.</p>"},{"location":"compose/how-it-works/","title":"How Compose works","text":"2021-02-28 <p>Under Construction</p> <p>This document is not completed. (but still usable)</p> <p>While I'm using compose(or Jetpack Compose), I was quite impressed how it was beautiful to write UI. (but note that Jetpack Compose itself has to do nothing with UI; it's a tool for building trees)</p> <p>I wondered how it works, I digged its runtime and compiler plugin. These are what I found.</p> <p>Note</p> <p>You are expected to have a background about Compose model. This document only covers Compose itself, not Compose UI or related. Compose is in beta stage; these contents may be obsolete. Disclaimer: you may expect poor English &amp; explaination</p>"},{"location":"compose/how-it-works/#terms","title":"Terms","text":"<ul> <li>Composer is what manages the state of tree. Every Composable function   receives this as a parameter.</li> <li>Composition is an act building up a tree.</li> <li>Recomposition is an act rebuilding a tree. You can access the   corresponding part of the previous tree if exists.</li> </ul>"},{"location":"compose/how-it-works/#how-it-diffs-the-tree","title":"How it diffs the tree","text":"<p>Composable functions are what is called every time it recomposes. Calling another composable function marks that invocation into the Composer, which the function receives through its parameter. Of course you cannot see it in the code, but it does receive after transformed by compiler plugin. Then, Composer internally builds a slot table which is built on gap array.</p> <p>Slot table elements are called <code>slot</code>. The types of <code>slot</code> are: normal slot, <code>group</code>, <code>node</code>, <code>data</code>, etc. These are well explained in the source code of SlotTable. One important thing is: <code>node</code>. Node is tracked by the Composer. When adapting Compose to your need(again, compose is a tree managing tool), you use <code>Applier</code>. When a node is inserted or removed, you get a callback from this.</p> <p>When first composing, Composer just writes down your composable into slot table. In the recomposition, if structure changes composer diffs your tree. But note that this diffing is not so same as something like React. Compiler plugin provides some diffing(it gives composer some hints about control flows and loops), so it has less overhead.</p> <p>There is a great video describing about this.</p> <p>I'll explain more about other things.</p>"},{"location":"compose/how-it-works/#how-it-detects-state-changes","title":"How it detects state changes","text":"<p>Consider the code below: <pre><code>val state = mutableStateOf(\"Apple\") // just for example\n\n@Composable\nfun A() {\nText(\"wow, ${state.value}!\")\nButton(onClick = { state.value = \"Banana\" }) {\nText(\"hi\")\n}\n}\n</code></pre> Clicking the button changes the <code>state</code>, and <code>A</code> is recomposed automatically. But how?</p> <p>Snapshot system handles this. While composing, your composer registers an observer to the current snapshot, and reading the state will fire the observer. It finally calls <code>composer.recordReadOf(state)</code> so your composable function automatically subscribes to that state. This is why you should not use normal mutable objects: they do not subscribe to the current snapshot by themselves.</p> <p>There are some predefined types to do this: <code>SnapshotStateList</code> and <code>SnapshotStateMap</code>, in addition to <code>SnapshotMutableState</code>.</p>"},{"location":"compose/how-it-works/#how-it-compiles","title":"How it compiles","text":"<p>Compose compiler plugin is built on the Backend IR, and transforms your Composable functions.</p> <p>Your code: <pre><code>@Composable\nfun MyComposable(name: String) {\nvar count by remember { mutableStateOf(1) }\n\nText(\"Clicked $count times\", style = MaterialTheme.typography.h2)\nButton(onClick = { count++ }) {\nText(\"Click $name\")\n}\n}\n\n\n// stubs for Compose UI\n\n@Composable\nfun Text(text: String, style: TextStyle = TextStyle())\n\n@Composable\nfun Button(onClick: () -&gt; Unit, content: @Composable () -&gt; Unit)\n\nobject MaterialTheme {\nval typography: Typography\n@Composable get() = TODO()\n}\n\ndata class Typography(val h2: TextStyle)\n</code></pre></p> <p>Compiled output(pseudo code): <pre><code>@Composable\nfun MyComposable(name: String, $composer: Composer&lt;*&gt;, $changed: Int) {\n$composer.startRestartGroup(193822) // a hash of source location, eg) \"com.example/myFile.kt/MyComposable\"\nval $dirty = $changed // 'val' is not a typo\n\nif($dirty and 0b0110 == 0)\n$dirty = $dirty or if($composer.changed(name)) 0b0010 else 0b0100\n\nif($dirty and 0b1011 xor 0b1010 != 0 || !$composer.skipping) {\nvar count by $composer.cache(true) { mutableStateOf(1) }\n\nText(\n\"Clicked $count times\",\nstyle = MaterialTheme.&lt;get-typography&gt;($composer, 0b0).h2,\n$composer = $composer,\n$changed = 0b0000000,\n$default = 0b0\n)\nButton(onClick = { count++ }, composableLambda($composer, key = 193702, tracked = true, null) { $composer, $changed -&gt;\nText(\n\"Click $name\", style = null,\n$composer = $composer,\n$changed = 0b0000000 or ($dirty and 0b1110),\n$default = 0b1\n)\n}, $composer, 0b0000000)\n} else {\n$composer.skipToGroupEnd()\n}\n$composer.endRestartGroup()?.updateScope { composer -&gt; MyComposable(name, composer, $dirty or 0b1) }\n}\n\n// ...\n</code></pre></p> <p>Wow, lots of things are done! Let's break up these things into pieces.</p> <p>The semantic of Composable function is similar to <code>suspend fun</code>.</p> <p><code>suspend fun</code> can call <code>suspend fun</code>;   normal function cannot call <code>suspend fun</code>.</p> <p>Likewise, normal function cannot call <code>@Composable fun</code>. This is because, basically they are a different kind of function, and they receives an additional synthetic parameter: Composer.</p> <p><pre><code>@Composable\nfun MyComposable(name: String, $composer: Composer&lt;*&gt;, $changed: Int) {\n// ...\n}\n</code></pre> You can see an synthetic paremeter <code>$composer: Composer&lt;*&gt;</code> is added.</p> <p>There's one more parameter: <code>$changed</code>.</p> <p>Composable function tries to skip execution when its parameters are unchanged. But comparing if parameters are changed is quite expensive in some cases. So Compose tries to avoid the comparison. When you just passes your argument to another Composable function as-is, Compose propagates the state, whether it is changed. The state is passed through <code>$changed</code>, which consists of 3-bit per parameter integer.</p> <p>The highest bit(0) indicates if it is stable. Stability is indicated via <code>@Stable</code> etc, or inferred by the compiler plugin. 1 means unstable, and 0 means stable.</p> <p>Two lower bits(1, 2) indicates the status of the parameter like below.</p> <ul> <li> <p>Uncertain(00)   Indicates that nothing is certain about the current state of the parameter.   It could be different than it was during the last execution, or it could be   the same, but it is not known so the current function looking at it must call   equals on it in order to find out.   This is the only state that can cause the function to spend slot table space   in order to look at it.</p> </li> <li> <p>Same(01)   This indicates that the value is known to be the same since the last time   the function was executed.   There is no need to store the value in the slot table in this case because   the calling function will always know whether the value was the same or   different as it was in the previous execution.</p> </li> <li> <p>Different(10)   This indicates that the value is known to be different since the last time   the function was executed.   There is no need to store the value in the slot table in this case because   the calling function will always know whether the value was the same or   different as it was in the previous execution.</p> </li> <li> <p>Static(11)   This indicates that the value is known to never change for the duration   of the running program.</p> </li> </ul> <p>(documentation copied from Compose source)</p> <p>The lowest bit(2) indicates if it is changed, 1 for same and 0 for different. If the state is Uncertain(00), it will be replaced by the result of comparison.</p> <p>The lowest bit of <code>$changed</code> itself is a special bit indicating a force recomposition, set to 1 when it recomposes.</p> <p><pre><code>    $composer.startRestartGroup(193822)\n</code></pre> Every Composable function produces a group.</p> <p><pre><code>    val $dirty = $changed // 'val' is not a typo\n\nif($dirty and 0b0110 == 0b0000)\n$dirty = $dirty or if($composer.changed(name)) 0b0010 else 0b0100\n</code></pre> As described above, it checks the <code>$changed</code> parameter(in turn <code>$dirty</code>). If the state is Uncertain(00), it compares the parameter via <code>$composer.changed(argument)</code>.</p> <p>What it internally does:</p> <ol> <li>Retrives the previous slot if exist(let be <code>previous</code>; if not exist then   becomes a special singleton value <code>EMPTY</code>)</li> <li>Saves the <code>argument</code> into the slot table</li> <li>Returns <code>previous != argument</code>.</li> </ol> <p>So if <code>argument</code> is changed, the state becomes Different(10). If not, becomes Same(01).</p> <p><pre><code>    if($dirty and 0b1011 xor 0b1010 != 0 || !$composer.skipping) {\n// ...\n}\n</code></pre> If all parameters are Same(001) and Stable(100), and the composer allows skipping, the execution is skipped. If not, it will execute.</p> <p><pre><code>        var count by $composer.cache(true) { mutableStateOf(1) }\n</code></pre> This is special kind of transformation. <code>remember(..) { expr }</code> becomes <code>$composer.cache(..) { expr }</code>. <code>true</code> means it does not always have to update.</p> <p><pre><code>        Text(\n\"Clicked $count times\",\nstyle = MaterialTheme.&lt;get-typography&gt;($composer, 0b0).h2,\n$composer = $composer,\n$changed = 0b0000000,\n$default = 0b0\n)\n</code></pre> This is a normal Composable function call.</p> <p>You can see something strange: <code>MaterialTheme.&lt;get-typography&gt;($composer, 0b0)</code>. As you might know, every property consists of getter, optional setter, and optional backing field. Getting property basically corresponds to calling getter internally. Its name is called <code>&lt;get-propertyName&gt;</code> in IR. As it is a normal function, compiler plugin can add a value parameter to getter. (yet impossible in plain Kotlin code)</p> <p>So, Composable function passes its <code>$composer</code> to Composable function, and <code>$changed</code> argument. It checks for all dependencies associated with that argument. For example, if the argument is <code>\"Hello, $name($age)!\"</code>, it depends on <code>name</code> and <code>age</code>.</p> <p>If a variable is</p> <ul> <li><code>const val</code>, global <code>val</code>, object etc: Static</li> <li>remember without keys(<code>remember(/* nothing here */) { .. }</code>): Static</li> <li>parameter: delegated (like <code>$changedN and 0b1110 shl 3</code>)</li> </ul> <p>If an expression is</p> <ul> <li>builtin expressions(Int.plus, \"$variable, string, ${someExpr()}\" etc):   combine all of its value parameters/receivers</li> <li>calling <code>@Stable fun</code>: combine all of</li> <li>unknown arbitrary function call: Unknown</li> </ul> <p>Also, whether all dependencies are Stable is marked. For more information, you can check the source code of StabilityInferencer.</p> <p>You can also see <code>$default</code>. Compose compiler plugin handles the default parameter by itself. It is almost identical to that of Kotlin, but Compose do not generate another function.</p> <p>Bit <code>1</code> means caller did not provide that parameter so requires special handling.</p> <p><pre><code>        Button(onClick = { count++ }, composableLambda($composer, key = 193702, tracked = true, null) { $composer, $changed -&gt; /* ... */ })\n</code></pre> Composable lambda is handled specially. Group is inserted surrounding most Composable functions, but it is inserted by <code>composableLambda</code>.</p> <p>Compose compiler plugin remembers the resulting lambda instance, and even the original lambda itself if it does not have captures. So the result of <code>composableLambda(..)</code>, hence seemingly all the Composable lambda is ensured to be identical(<code>a === b</code>).</p> <p><pre><code>            Text(\n\"Click $name\", style = null,\n$composer = $composer,\n$changed = 0b0000000 or ($dirty and 0b1110),\n$default = 0b1\n)\n}, $composer, 0b0000000)\n</code></pre> Here we propagate the state of parameter <code>name</code> to the first argument <code>text</code>. We also use the default value of <code>style</code>, so we pass <code>$default = 0b1</code>.</p> <p><pre><code>    else {\n$composer.skipToGroupEnd()\n}\n</code></pre> If we can skip this function, skip it.</p> <p><pre><code>    $composer.endRestartGroup()?.updateScope { composer -&gt; MyComposable(name, composer, $dirty or 0b1) }\n</code></pre> Finally, ends the group. <code>updateScope() { ... }</code> is related to Composable function Restart. If it can, it updates the restartable scope. The lambda provided to <code>updateScope</code> is used to restart the Composable function. If something changes, like updating state happen, Compose finds the subscribers (where the state is used) and retrieves the nearest restartable scope, and invokes it.</p> <p>You can see Compose compiler plugin is quite complex.</p> <p>Composer does more: it transforms control flows and loops.</p> <p><pre><code>if(condition) {\nsimpleFunction()\na += 1\n}\n</code></pre> Codes like this are not transformed, but</p> <p><pre><code>if(condition) {\nComposableFunction()\n}\n</code></pre> Codes that calls Composable fun in the condition or its result gets transformed.</p> <p>Result: <pre><code>if(condition) {\n$composer.startReplaceableGroup(29381)\nComposableFunction($composer, 0)\n} else {\n$composer.startReplaceableGroup(193052)\n}\n$composer.endReplaceableGroup()\n</code></pre></p> <p>That is, Compose compiler handles code that may not run only once. In the previous example, <code>ComposableFunction</code> may not run or may run once.</p> <p>The reason composer handles this is: Composer call is sequential. Without this transformation, the tree may go wrong.</p>"},{"location":"high/covid-selftest-macro/","title":"\ucf54\ub85c\ub09819 \uc790\uac00\uc9c4\ub2e8 \ub9e4\ud06c\ub85c\ub97c \ub9cc\ub4e4\uba70..?","text":"2021-06-12 <p>\ub0b4\uac00 \uc774 \uc571\uc744 \ub9cc\ub4e4\uac8c \ub41c \uac83\uc740 \uadf8\ub0e5 \uc790\uac00\uc9c4\ub2e8\uc744 \uc9c1\uc811 \ud558\uae30 \ub9ce\uc774 \uadc0\ucc2e\uc544\uc11c\uc600\ub2e4. \ucc98\uc74c \ub9cc\ub4e0\uc9c0 \uba87 \ub2ec\uc740 \ub418\uc5c8\ub294\ub370, \uc791\ub144(2020) \uac00\uc744\uc778\uac00 \uc988\uc74c\uc5d0 \ub9cc\ub4e4\uae30 \uc2dc\uc791\ud55c\uac70 \uac19\ub2e4. \ucc98\uc74c\uc5d0\ub294 \uadc0\ucc2e\uc544\uc11c \ub9cc\ub4e0 \uc571\uc774\ub77c \ucf54\ub4dc\ub3c4 \ub300\ucda9 \uc9f0\ub2e4. \ud558\uc9c0\ub9cc \uc9c0\uae08\uae4c\uc9c0 \uc5c5\ub370\uc774\ud2b8\ub97c \uac70\ub4ed\ud574\uc624\uba74\uc11c \uc815\uc774 \ub4e4\uc5c8\ub294\uc9c0 \uaf64 \ub9ce\uc740 \uc2dc\uac04\uc744 \uc774 \uc571 \uac1c\ubc1c\uc5d0 \ud560\uc560\ud588\ub2e4.</p>"},{"location":"high/covid-selftest-macro/#_1","title":"\uac1c\ubc1c \uacfc\uc815","text":"<p>\uc790\uac00\uc9c4\ub2e8 api \ubd84\uc11d\uc744 \uc704\ud574 \uc790\uac00\uc9c4\ub2e8 \uacf5\uc2dd \uc0ac\uc774\ud2b8\uc5d0 \ub4e4\uc5b4\uac14\ub2e4. \uac1c\ubc1c\uc790 \ub3c4\uad6c\ub97c \ucf1c\uace0 \ub85c\uadf8\uc778\ubd80\ud130 \uc790\uac00\uc9c4\ub2e8 \uc81c\ucd9c\uae4c\uc9c0\uc758 \uacfc\uc815\uc744 \ud558\uace0 \ub098\uc11c \ub124\ud2b8\uc6cc\ud06c \ud328\ub110\uc758 \uac83\ub4e4\uc744 \ubd24\ub2e4. \ub2e4\ud589\ud788\ub3c4 \uc790\uac00\uc9c4\ub2e8 \uc0ac\uc774\ud2b8\ub294 \ub0b4\ubd80\uc758 REST API\uac00 \ubcc4\uac1c\ub85c \uc788\uc5c8\ub2e4. \uadf8 \ub355\uc5d0 \uad6c\uc870\ub97c \ub72f\uc5b4\ubcf4\uae30 \ub354\uc6b1 \uc218\uc6d4\ud588\ub2e4.</p> <p>\ub2e4\ub9cc \uc778\uc99d \uad00\ub828\ub41c \ub0b4\uc6a9\uc5d0\uc11c \uc0c1\ub2f9\ud788 \uace8\uba38\ub9ac\ub97c \uacaa\uc5c8\ub2e4. \uc778\uc99d \ud0a4\uac00 \ud55c \uac1c\uac00 \uc544\ub2c8\uc5c8\ub2e4. \ucd08\uae30\uc5d0\ub294 \ub9e4\ubc88 \uc720\ub3d9 \ud0a4\ub97c \ubc1b\uc544\uc640\uc11c \uc790\uac00\uc9c4\ub2e8\uc744 \ud558\ub294 \ud615\ud0dc\uc600\ub2e4.</p> <p>\uc790\uac00\uc9c4\ub2e8\uc5d0\uc11c \ub0b4\uc6a9\ub4e4\uc740 https\ub85c \uc804\uc1a1\ub418\ub294\ub370, API\ub4e4 \uc911\uc5d0\ub294 \uc774\ub984\uacfc \uc0dd\ub144\uc6d4\uc77c\uc744 \uc554\ud638\ud654\ud574\uc57c \ud558\ub294 \ubd80\ubd84\uc774 \uc788\ub2e4. \uc65c \uad73\uc774 \uc554\ud638\ud654\ub97c \ud558\ub294\uc9c0 \uc758\ubb38\uc774\uc9c0\ub9cc, \uc77c\ub2e8 \uad6c\ud604\ud574\uc57c \ud558\uae30\uc5d0 \ud588\ub2e4. \uc774 \ubd80\ubd84\uc5d0 \uc548\ub4dc\ub85c\uc774\ub4dc\uc5d0\uc11c JSEncrypt\uc5d0 \ub300\uc751\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ucc3e\uc544\uc11c \uc554\ud638\ud654\ud558\ub294\uac8c \ud798\ub4e4\uc5c8\ub2e4. \uc0ac\uc2e4 \uc54c\uace0\ubcf4\uba74 \uac04\ub2e8\ud55c \uac70\uc600\uc9c0\ub9cc \uc0bd\uc9c8\ud55c \ubd80\ubd84\uc774\uc5c8\ub2e4.</p> <p>\ub0b4\ubd80 api \uad6c\uc870\uac00 \ubc14\ub014 \ub54c\ub9c8\ub2e4 \uc571 \uc5c5\ub370\uc774\ud2b8\ub97c \ud558\ub294 \uac83\ub3c4 \uace0\uc5ed\uc774\uc5c8\ub2e4. \ub0b4\uac00 \ub9cc\ub4e0 \uc571\uc744 \uc4f0\ub294 \uc0ac\ub78c\ub4e4\uc774 \ubd88\ud3b8\uc744 \uacaa\uc9c0 \uc54a\ub3c4\ub85d \ucd5c\ub300\ud55c \ube68\ub9ac \uc5c5\ub370\uc774\ud2b8\ud588\ub2e4. (\ud55c 2\uc2dc\uac04 \uc548\uc5d0 \ud328\uce58\ud588\ub358\uac70 \uac19\ub2e4. \uc544\ub2cc\uac00) \uadf8\ub9ac\uace0 \uc5c5\ub370\uc774\ud2b8\uac00 \uac00\ub2a5\ud558\ub3c4\ub85d \uacf5\uc9c0\uc0ac\ud56d \uae30\ub2a5\uc744 \ub123\uc5c8\ub2e4. \uc774\uac74 \uac1c\uc120\ud560 \uacc4\ud68d\uc774\ub2e4.</p>"},{"location":"high/covid-selftest-macro/#_2","title":"\ud328\uce58 \uc608\uc815\uc778 \uac83\ub4e4","text":"<p>\ub9cc\ub4e4\ub2e4 \ubcf4\ub2c8 \uc815\uc774 \ub4e4\uc5b4\uc11c \uc5c4\uccad \uc5f4\uc2ec\ud788 \ub9cc\ub4e4\uace0 \uc788\ub2e4. \ucf54\ub4dc\ubca0\uc774\uc2a4\uac00 \uc548\ub4dc\ub85c\uc774\ub4dc UI \ud504\ub808\uc784\uc6cc\ud06c \uae30\ubc18\uc774\uc5c8\ub294\ub370 \ucf54\ub4dc\uac00 \uad6c\ub824\uc11c Jetpack Compose\ub85c \ub2e4\uc2dc \uac08\uc544\uc5ce\uace0 \uc788\ub2e4. \uadf8\ub9ac\uace0 UI/UX \uac1c\uc120\ub3c4 \ud560 \uac83\uc774\ub2e4.</p> <p>\uadf8\ub9ac\uace0 \ub79c\ub364 \uc2dc\uac04 \uae30\ub2a5\ub3c4 \ub9cc\ub4e4\ub824 \ud55c\ub2e4. \ud639\uc2dc\ub098 \ub9e4\uc77c \uc644\uc804 \ub611\uac19\uc740 \uc2dc\uac04\uc5d0\ub9cc \uc9c4\ub2e8\ud558\uba74 \uc758\uc2ec\uc744 \uc0b4 \uc218\ub3c4 \uc788\uc73c\ub2c8 \ubc94\uc704\ub97c \uc9c0\uc815\ud574\ub450\uba74 \ub9e4\uc77c \uadf8 \ubc94\uc704 \uc548\uc5d0\uc11c \uc784\uc758\uc758 \uc2dc\uac04\uc744 \uc120\ud0dd\ud55c\ub2e4.</p> <p>\ub610 \uc5ec\ub7ec \uba85\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uac8c \ud560 \uc608\uc815\uc774\ub2e4. \uc6d0\ub798 \uc790\uac00\uc9c4\ub2e8 \uc2dc\uc2a4\ud15c \uc790\uccb4\uac00 \uc5ec\ub7ec \uba85\uc744 \ud55c \uc0ac\ub78c\uc758 \uacc4\uc815\uc5d0 \uc5f0\uacb0\ud574\ub458 \uc218 \uc788\uac8c \ub418\uc5b4\uc788\uae34 \ud558\uc9c0\ub9cc, \uadf8 \uc2dc\uc2a4\ud15c\uacfc \ubcc4\uac1c\ub85c \uc5ec\ub7ec \uba85\uc744 \ucd94\uac00\ud574\ub450\uace0, \ub2e4 \ud55c\ubc88\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc790\uac00\uc9c4\ub2e8\ud560 \uc218 \uc788\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4 \uac83\uc774\ub2e4.</p>"},{"location":"kotlin-compiler-plugin/backend-ir/","title":"Writing a Kotlin Backend IR Compiler Plugin","text":"2021-03-15 <p>Under Construction</p> <p>This document is not completed.</p> <p>Backend IR is a new, unified way of writing a compiler plugin. Currently IR is in a beta stage, and will be the default backend in Kotlin 1.5. Compared to a bare compiler plugin written for JVM, Backend IR has some benefits:</p> <ul> <li>easier to write (a lot!)</li> <li>not platform dependant</li> <li>works well with other compiler plugins</li> </ul>"},{"location":"kotlin-compiler-plugin/backend-ir/#get-started","title":"Get started","text":"<p>You need to enable IR so far: kotlinc argument <code>-Xuse-ir</code>.</p> <p>Add kotlin compiler plugin library: <pre><code>// gradle\ndependencies {\n// ...\ncompileOnly(\"org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion\")\n}\n</code></pre></p> <p>The entrypoint for all kotlin compiler plugin is CommandLineProcessor and ComponentRegistrar.</p> <pre><code>class MyCommandLineProcessor : CommandLineProcessor {\noverride val pluginId = \"com.myplugin\"\noverride val pluginOptions = emptyList&lt;CliOption&gt;()\n}\n</code></pre> <pre><code>class MyComponentRegistrar : ComponentRegistrar {\noverride fun registerProjectComponents(project: MockProject, configuration: CompilerConfiguration) {\nprintln(\"Hello, ComponentRegistrar!\")\n}\n}\n</code></pre> <p>You need to add services for these. Go to resources di, make <code>META-INF/services/</code> </p>"},{"location":"other/windows-self-driver-signing-en/","title":"Self-signing on Windows","text":"<p>This document assumes that those reading this document has basic expertises for shell and programming. Even though I tried to explain as much as I can, it will not suffice for most people without extertises. If you are not, you may try these, but it will be... painstaking. Same document in Korean is also available. Note that my english may be poor.</p> <p>Alert</p> <p>Get yourself informed enough. I do not guarantee if this would work. This writing is the record of what I've done, rather than a comprehensive guide. kleene-way-to-do-this (better than mine) should be exist.</p> <p>Another Alert</p> <p>Note that I do not know any security implications by this task. Steps below may be more harmful than just enabling testsigning. Know what you do.</p>"},{"location":"other/windows-self-driver-signing-en/#why","title":"Why?","text":"<p>I found Synchronous Audio Router(SAR) which can,</p> <ul> <li>add virtual audio device (UNLIMITED; as far as your Windows stands)</li> <li>FOSS</li> <li>just liked it</li> <li>high performance, low latency</li> </ul> <p>So I made up mind to install it. However...</p> <p>At this point I'd turned Secure Boot and gotta upgrade to Windows 11. I also considered security, so turning on <code>testsigning</code> was not eligible.</p> <p>At that time I came across a comment from one issue saying:</p> <p>UPDATE 3: SUCCESS!!!!!!!!! I am running the latest SAR in Reaper as we speak on windows 10 without testmode.</p> <p>(lhwdev was determined!)</p>"},{"location":"other/windows-self-driver-signing-en/#unsigned-prereleased-drivers-note","title":"Unsigned prereleased drivers note","text":"<p>Prereleases of SAR are unsigned. That means that it is required to enable testsigning boot option   to make Windows load the driver. Else the driver won't be loaded.</p>"},{"location":"other/windows-self-driver-signing-en/#get-started","title":"Get started","text":"<ul> <li>Before you start, find ways to set UEFI Platform Key on your device. If your UEFI does   not support this, you cannot do these all.</li> <li>This document covers a lot of dangerous things like 'setting UEFI Platform Key, editing EFI   boot partition, modifying Windows system registry'. Recommend backup in advance.   (but the writer did not)</li> </ul> <p>Reference</p> <p>If you want, take a look at that issue I began from, and the repo referenced from there.</p>"},{"location":"other/windows-self-driver-signing-en/#creating-certificates-configuration","title":"Creating Certificates &amp; Configuration","text":"<p>I used builtin powershell command <code>New-SelfSignedCertificate</code> to create certificates first, but I came to use OpenSSL. If you want to use builtin things, you can follow this one instead of openssl-related things.</p> <p>We are going to create certificates which is only valid on your device. (Virtual) Root Certificate Authority, (Root CA) and create other certs using it. These methods will work on Windows 11 AFAIK.</p> <p>Launch Powershell with admistrative privilege. (not needed to create certs; needed after that) This article is based on Powershell.</p> <p>The resulting files are like this: <pre><code>root-ca\n- private.key\n- cert-request.conf\n- cert-request.csr\n- cert.cer\n- serial.srl\nplatform-key\n- private.key\n- cert-request.conf\n- cert-request.csr\n- cert.cer\n- PK.unsigned.esl\n- PK.esl\n- PK.old.esl\nkernel-mode\n- private.key\n- cert-request.conf\n- cert-request.csr\n- cert.cer\n</code></pre> You can rename as you want, but you need to use that name all through this guide.</p>"},{"location":"other/windows-self-driver-signing-en/#installing-openssl","title":"Installing OpenSSL","text":"<p>OpenSSL is bundled when installing Git, so to use it check out this StackOverflow answer.</p> <p>Those with Chocolatey installed can use <code>choco install openssl</code> in privileged shell. Use <code>refreshenv</code> to use new installed one without restarting shell. (bundled with choco)</p>"},{"location":"other/windows-self-driver-signing-en/#creating-root-ca-certificate","title":"Creating Root CA Certificate","text":"<p>If the certificate of Root CA itself is trusted, certs that CA created will be trusted.</p> <p>Create <code>root-ca</code> directory, and run the following. <pre><code>cd root-ca\n\n# Generate private key\nopenssl genrsa -aes256 -out private.key 2048\n</code></pre> Demonstration of this is:</p> <ul> <li><code>-aes256</code>: Encrypt the created private key. If you want to omit this you can, but it would be bad for   security?</li> <li><code>-out private.key</code>: Into the file 'private.key'.</li> <li><code>2048</code>: The length of key.</li> </ul> <p>Then copy-paste below and save to <code>cert-request.conf</code>, modifying what you want. Do not modify things like countryName, (it does nothing) instead edit countryName_default, for instance.</p> <pre><code>[ req ]\ndefault_bits = 2048\ndefault_md = sha256\ndefault_keyfile = private.key\ndistinguished_name = localhost_root_ca\nextensions = v3_ca\nreq_extensions = v3_ca\n\n[ v3_ca ]\nbasicConstraints = critical, CA:TRUE # , pathlen:0 # This option can adjust maximum number of 'intermediate CA'.\nsubjectKeyIdentifier = hash\nkeyUsage = keyCertSign, cRLSign\n\n[ localhost_root_ca ]\ncountryName = Country Name (2 letter code)\ncountryName_default = organizationName = Organization Name (eg, company)\norganizationName_default = Localhost # or what you want?\n\norganizationalUnitName = Organizational Unit Name (eg, section)\norganizationalUnitName_default  = commonName = \"Common Name (eg, your name or your server's hostname)\"\ncommonName_default = Localhost Root Certification Authority # or the name you want??\n</code></pre> <p>Return to shell, execute below to create Certificate Signing Request(CSR).</p> <pre><code>openssl req -new -key private.key -out cert-request.csr -config cert-request.conf\n</code></pre> <p>You will see below. <pre><code>Enter pass phrase for private.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) []:\nOrganization Name (eg, company) [Localhost]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) [Localhost Root Certification Authority]:\n</code></pre> Enter the password (if you set), press enter repeatedly as we set default values in <code>cert-request.conf</code>.</p> <p>Now you can see <code>cert-request.csr</code>. Create actual cert with command below. <pre><code>openssl x509 -req -days 18250 -extensions v3_ca `\n  -in cert-request.csr -signkey private.key `\n  -out cert.cer -extfile cert-request.conf\n</code></pre></p> <ul> <li>Replace 18250 in <code>-days 18250</code> with the duration you want the cert to be valid. Note that 18250 equals to   approximately 50 years. (or 365 * 50)</li> <li><code>-extensions v3_ca</code> loads <code>[ v3_ca ]</code> part from .conf file you'd written.</li> <li>The left are file names.</li> </ul> <p>Now you need to register <code>cert.cer</code> to Windows so that it is trusted. Double click the cert created from above, <code>cert.cer</code>, and 'Install certificate...' &gt; 'Local Machine' &gt; 'Place all certificates in the following store', 'Browse... &gt; 'Trusted Root Certification Authorities'. Now if you open your cert, it will be shown as valid.</p> <p>Now let's create UEFI Platform Key Certificate and Kernel Mode Driver Certificate.</p>"},{"location":"other/windows-self-driver-signing-en/#creating-uefi-platform-keypk-certificate","title":"Creating UEFI Platform Key(PK) Certificate","text":"<p>Move to the root directory we started, new folder 'platform-key', and run below.</p> <pre><code>cd ../platform-key\n\n# Generate personal key\nopenssl genrsa -aes256 -out private.key 2048\n</code></pre> <p>After, new file <code>cert-request.conf</code> and copy-paste, once more.</p> <pre><code>[ req ]\ndefault_bits = 2048\ndefault_md = sha256\ndefault_keyfile = private.key\ndistinguished_name = localhost_uefi_platform_key\nextensions = v3_req\n\n[ v3_req ]\nbasicConstraints = CA:FALSE\nauthorityKeyIdentifier = keyid, issuer\nsubjectKeyIdentifier = hash\nkeyUsage = digitalSignature\n\n[ localhost_uefi_platform_key ]\ncountryName = Country Name (2 letter code)\ncountryName_default = organizationName = Organization Name (eg, company)\norganizationName_default = Localhost\n\norganizationalUnitName = Organizational Unit Name (eg, section)\norganizationalUnitName_default  = commonName = \"Common Name (eg, your name or your server's hostname)\"\ncommonName_default = Localhost UEFI Platform Key Certificate\n</code></pre> <p>Create CSR file. <pre><code>openssl req -new -key private.key -out cert-request.csr -config cert-request.conf\n</code></pre> Enter the password and press enterrrrrr again.</p> <p>Let's make the certificate. <pre><code>openssl x509 -req -days 18250 -extensions v3_req `\n  -in cert-request.csr `\n  -CA ../root-ca/cert.cer -CAcreateserial -CAserial ../root-ca/serial.srl `\n  -CAkey ../root-ca/private.key `\n  -extfile cert-request.conf -out cert.cer\n</code></pre></p> <ul> <li><code>-CA ...</code>: path to CA certificate (public key)</li> <li><code>-CAkey ...</code>: same (but private key)</li> <li><code>-CAcreateserial -CAserial ../root-ca/serial.srl</code>: Create serial file and save to serial.srl.   This file let certificates made using CA never have serial numbers colliding.   If serial.srl file already exists, you should exclude <code>-CAcreateserial</code> option.</li> </ul> <p>Additionally you should convert private.key to .pfx file as it is used from signtool to sign 'Si Policy'.</p> <pre><code>openssl pkcs12 -export -out private.pfx -inkey private.key -in cert.cer\n</code></pre>"},{"location":"other/windows-self-driver-signing-en/#setting-platform-key-of-uefi-firmware","title":"Setting Platform Key of UEFI Firmware","text":"<p> <p>Cool</p></p> <p>There are different ways depending on your device. My computer was Dell laptop, where there is 'Export Key Management', but it didn't work. But I got it work by using powershell command <code>Set-SecureBootUefi</code>.</p> <p>If you want to set PK after generating all the keys you can, but you might feel sense of lose(?) if your UEFI do not allow you to set PK.</p> <p>Check your UEFI setting first and try it if exists.</p> <p>In the method below using powershell, I used <code>efitools</code> through WSL. (but that command has some parameter like <code>-Hash</code>? I didn't try it) In fact I couldn't find alternative for efitools, so if you find one, PR this document.</p> <p>Before trying methods below, change Secure Boot Mode in UEFI configuration. Changing keys like PK is blocked by default. For me, (Dell laptop) there were 'Deploy Mode' and 'Audit Mode'. Setting Secure Boot Mode to 'Audit Mode' made it work.</p> <p>Get into WSL terminal.</p> <p><pre><code># Move to platform-key directory\ncd $(wslpath \"path to platform-key/\")\n\n# generate esl file\ncert-to-efi-sig-list -g \"$(cat /proc/sys/kernel/random/uuid)\" cert.cer PK.unsigned.esl\n\n# sign esl file\nsign-efi-sig-list -k private.key -c cert.cer PK PK.unsigned.esl PK.esl\n</code></pre> Note that .esl stands for EFI Signature List, which is a format to store signatures in UEFI firmware.</p> <p>Backup esl file in advance, just in case, from powershell. <pre><code>Get-SecureBootUefi -Name PK -OutputFilePath PK.old.esl\n</code></pre></p> <p>Then open powershell with administrative privilege, (don't need to reopen if you are with) move to platform-key directory, and enter below.</p> <pre><code>Set-SecureBootUEFI -Name PK -SignedFilePath PK.esl -ContentFilePath PK.unsigned.esl -Time $(Get-Date)\n</code></pre> <p>If <code>Set-SecureBootUEFI: Invalid certification data: 0xC0000022</code> shows, you may put wrong key, may not change Secure Boot Mode, or your UEFI may not support it. If you see something like below, congratulations. Our UEFI will trust our CA.</p> <pre><code>Name Bytes                Attributes\n---- -----                ----------\nPK   {161, 89, 192, 18\u2026} NON VOLATILE\u2026\n</code></pre> <p>APPENDIX: I've changed my laptop, so I tried this once again in 'Samsung Galaxy Book'. There was nothing like Audit Mode/Deploy Mode, (it seems they won't allow changing UEFI keys out of UEFI setup) but I could set PK in UEFI setup. It didn't show my D: drive, and came up that I can only select FAT32 partitions. I created new partition, copy PK file and finally I managed to set PK.</p>"},{"location":"other/windows-self-driver-signing-en/#creating-kernel-mode-driver-certificate","title":"Creating Kernel Mode Driver Certificate","text":"<p>New directory kernel-mode-driver from root, run this.</p> <pre><code>cd ../kernel-mode-driver\n\n# generate personal key\nopenssl genrsa -aes256 -out private.key 2048\n</code></pre> <p>Create <code>cert-request.conf</code> here again like this:</p> <pre><code>[ req ]\ndefault_bits = 2048\ndefault_md = sha256\ndefault_keyfile = private.key\ndistinguished_name = localhost_kernel_mode_driver\nextensions = v3_req\n\n[ v3_req ]\nbasicConstraints = CA:FALSE\nauthorityKeyIdentifier = keyid, issuer\nsubjectKeyIdentifier = hash\nkeyUsage = digitalSignature\nextendedKeyUsage = codeSigning\n\n[ localhost_kernel_mode_driver ]\ncountryName = Country Name (2 letter code)\ncountryName_default = organizationName = Organization Name (eg, company)\norganizationName_default = Localhost\n\norganizationalUnitName = Organizational Unit Name (eg, section)\norganizationalUnitName_default  = commonName = \"Common Name (eg, your name or your server's hostname)\"\ncommonName_default = Localhost Kernel Mode Driver Certificate\n</code></pre> <p>Create CSR file. <pre><code>openssl req -new -key private.key -out cert-request.csr -config cert-request.conf\n</code></pre> Enter password, press enter a few times.</p> <p>Create certificate. <pre><code>openssl x509 -req -days 18250 -extensions v3_req `\n  -in cert-request.csr `\n  -CA ../root-ca/cert.cer -CAserial ../root-ca/serial.srl `\n  -CAkey ../root-ca/private.key `\n  -extfile cert-request.conf -out cert.cer\n</code></pre></p> <p>Again, need to convert private.key into .pfx file.</p> <pre><code>openssl pkcs12 -export -out private.pfx -inkey private.key -in cert.cer\n</code></pre> <p>We made all three certificates needed. (we could combine all into one, but that would be inflexible and less secure? maybe?)</p>"},{"location":"other/windows-self-driver-signing-en/#setting-signing-policy-si-policy","title":"Setting Signing Policy (Si Policy)","text":"<p>We had to create xml file containing signing policy then convert into binary file, but this only works in Windows Enterprise/Education Edition. So Download prebuild binary file.</p> <p>Maybe Harmful to Your Computer</p> <p><code>@ridingtheflow</code> told that this prebuilt SiPolicy states that it allows any driver. Also, downloading SiPolicy itself may be harmful. Building SiPolicy with <code>New-CIPolicy</code> is also fishy, because it will by default create policy with <code>Enabled:Audit Mode</code>, which is meant for debugging.</p> <p>Now sign <code>selfsign.bin</code> so that Windows recognizes it.</p> <pre><code>signtool sign /fd sha256 /p7co 1.3.6.1.4.1.311.79.1 /p7 . /f platform-key/private.pfx /p &lt;# password for platform-key #&gt; sipolicy/selfsign.bin\n</code></pre> <ul> <li><code>sipolicy/selfsign.bin</code>: the file you downloaded right before</li> </ul> <p>Now you will see <code>selfsign.bin.p7</code> file. Rename it into <code>SiPolicy.p7b</code>. Open powershell with administrative privilege, (don't need to reopen if you are with) enter command:</p> <pre><code># Mount EFI system partition on X: drive (dangerous!)\nmountvol x: /s\n\n# Copy SiPolicy\ncp SiPolicy.p7b X:\\EFI\\Microsoft\\Boot\\\n\n# unmount EFI volume if you want\nmountvol x: /d\n</code></pre>"},{"location":"other/windows-self-driver-signing-en/#turning-on-custom-kernel-signercks","title":"Turning on Custom Kernel Signer(CKS)","text":"<p>This value called 'CodeIntegrity-AllowConfigurablePolicy-CustomKernelSigners' is stored in <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions</code> in registry. This value can be set when kernel initialization is not finished. See original documentation for more detail.</p> <p>Download ssde.zip from here. There is ssde.sys inside. We will sign this driver.</p> <pre><code>signtool sign /fd sha256 /a /ac root-ca/cert.cer /f kernel-mode-driver/private.pfx /p &lt;# password #&gt; /td sha256 /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp ssde.sys\n</code></pre> <p>After running following commands, Windows recognizes some system driver is signed with unknown driver. (as we didn't configure some Code Integrity related values) So causing kernel fault. You will enter the recovery mode, known as WinRE, meaning you CANNOT BOOT until you change something there.</p> <p>Those who fears a lot can configure WinPE(Windows Preinstalled Environment), but you may manually enter WinRE from UEFI, maybe? If you want check in advance. but the author didn't EP2 To check if WinRE is available, run below. <pre><code>reagentc /info\n</code></pre> If Windows RE status is <code>Enabled</code>, it will likely work. If not, you need to enable it by <code>reagentc /enable</code>.</p> <p>Install the ssde.sys signed above by running command below in administrative privilege. (If you are in cmd, change <code>$env:windir</code> to <code>%windir%</code>.)</p> <pre><code>cp ssde.sys $env:windir\\system32\\drivers\\ssde.sys\nsc.exe create ssde binpath=$env:windir\\system32\\drivers\\ssde.sys type=kernel start=boot error=normal\n</code></pre> <p>To revert this, you can just delete that driver in command prompt in recovery mode or somewhere, like <code>del /F C:\\Windows\\System32\\drivers\\ssde.sys</code>. If you turn off Secure Boot even after you succeeded all steps, there will be no PK, so Windows won't recognize <code>ssde.sys</code> and you will be brought to recovery mode.</p> <p>Watch following contents in your phone or write down in advance. Reboot your computer, and it will show different like 'Preparing Auto Repair'. This means booting failed and implies kernel panic.</p> <p>Your PC did not start correctly.</p> <p>Click Advanced options, then Troubleshoot &gt; Advanced options &gt; Command Prompt. Select your account and enter password. It will show a command prompt. Enter <code>regedit</code> to enter Registry Editor. Select <code>HKEY_LOCAL_MACHINE</code>, go to <code>File(F)</code> &gt; <code>Load hive(L)...</code> then open <code>C:\\Windows\\System32\\config\\SYSTEM</code>, enter any name, (doesn't matter) then you will see '(any name)' under <code>HKEY_LOCAL_MACHINE</code>. select <code>ControlSet001\\Control\\CI\\Protected</code> under (any name), change the value <code>Licensed</code> from <code>0</code> to <code>1</code>.</p> <p></p> <p>Like this.</p> <p>We finished what we have to do. Close all windows and reboot, and it will start normally. Now start <code>ssde_info.exe</code> (from ssde.zip we've downloaded somewhere above) from shell. If it shows thingy like this:</p> <pre><code>API version is 1.1\nArm count is 2\nArm watchdog status is 1\nLicense tamper state is 0\n</code></pre> <p>than you would likely have succeeded, as this driver was signed with our cert.</p> <p>Now restart your computer and check if it boots normally. If it does, we finished configuring self signing, Congratulations. If not, repeat going into recovery mode and setting registry a few times.</p> <p>If you want revert Secure Boot Mode from UEFI settings. (which was needed to set PK)</p> <p>Appendix: This didn't work well on my new laptop. However after I installed ssde service, I ran ssde_enable.exe then restarted -&gt; enter recovery mode -&gt; edited registry -&gt; restarted -&gt; (some cmd window automatically opened setting things up), which came up to be success.</p>"},{"location":"other/windows-self-driver-signing-en/#reference","title":"Reference","text":"<p>This document is based on ssde. Some references are:</p> <ul> <li>Stable method: valinet/ssde</li> <li>First working PoC: HyperSine/Windows10-CustomKernelSigners</li> <li>Original PoC: Licensed Driver Signing in Windows 10</li> </ul> <p>Some useful documents:</p> <ul> <li>Articles about UEFI Secure Boot from U.S. Defense</li> </ul>"},{"location":"other/windows-self-driver-signing/","title":"\uc708\ub3c4\uc6b0\uc5d0\uc11c \uc9c1\uc811 \ub4dc\ub77c\uc774\ubc84 \uc11c\uba85\ud558\uae30","text":"<p>Note: English version available.</p> <p>\uc548\ub0b4</p> <p>\uc774 \uae00\uc744 \ub530\ub77c\ud558\uae30 \uc804\uc5d0 \ucda9\ubd84\ud788 \ucc3e\uc544\ubcf4\uace0 \ud558\uc138\uc694. \ud544\uc790\ub294 \uc5b4\ub5a4 \ubb38\uc81c\ub3c4 \ubcf4\uc7a5\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \uae00\uc740 \uc0c1\uc138\ud55c \uc124\uba85\uc11c\uac00 \uc544\ub2c8\ub77c, \uadf8\ub0e5 \uc81c\uac00 \uc5b4\ub5a4 \uc0bd\uc9c8\uc744 \ud588\ub294\uc9c0(\ub294 \uc880 \uc0dd\ub7b5\ub410\uc9c0\ub9cc), \uc5b4\ub5bb\uac8c \uc131\uacf5\ud588\ub294\uc9c0\ub97c \uae30\ub85d\ud55c \uae00\uc785\ub2c8\ub2e4. \ubc18\ub4dc\uc2dc \ub354 \uae54\ub054\ud55c \ubc29\ubc95\uc774 \uc788\uc744 \uac81\ub2c8\ub2e4.</p> <p>\uc548\ub0b4 2</p> <p>\uc774\uac78 \ub530\ub77c\ud558\uba74 \uc548\uc804\ud560 \uac70\ub77c\uace0 \ubcf4\uc7a5\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4 \uc774\ub300\ub85c \ud558\uba74 \uc2e4\uc81c\ub85c \uc548\uc804\ud55c\uc9c0 \uc704\ud5d8\ud55c\uc9c0\ub3c4 \ubaa8\ub985\ub2c8\ub2e4.. \uc5b4\uca4c\uba74 testsigning\ubcf4\ub2e4 \ub354 \ubcf4\uc548\uc0c1 \ub098\uc060 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"other/windows-self-driver-signing/#_2","title":"\uc65c?","text":"<p>\uc628\ub77c\uc778 \uc218\uc5c5\uc744 \ud558\uba74\uc11c \ub9c8\uc774\ud06c\ub85c \uc7a5\ub09c(...)\uc744 \uc880 \uccd0\ubcf4\uace0 \uc2f6\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud3c9\uc18c\uc5d0 \uc74c\uc545\uc744 \ub4e4\uc744 \ub54c FL \uac19\uc740 DAW\ub85c \uc18c\ub9ac\ub97c \uc9c1\uc811 \ubcf4\uc815\ud574\uc11c \ub4e4\uc5c8\ub294\ub370, \uc624\ub514\uc624 \uc2a4\ud399\ud2b8\ub7fc\uc744 \ubcf4\uba74 \uc880 \uac04\uc9c0\ub098\uae30 \ub54c\ubb38\uc5d0...</p> <p>\uc544\ubb34\ud2bc \uc774\ub7ec\ud55c \uc9d3\uac70\ub9ac\uc5d0\ub294 \ud544\uc218\uc801\uc73c\ub85c \ud544\uc694\ud588\ub358 \uac8c \ubc14\ub85c \uac00\uc0c1 \uc624\ub514\uc624 \uc7a5\uce58\uc600\ub294\ub370 \uc774\ubbf8 \ub098\uc640\uc788\ub294 \uac83\ub4e4\uc740 \uc544\ub798\uc640 \uac19\uc558\uace0 \ubaa8\ub450 \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \uc54a\uc558\uc5b4\uc694.</p> <ul> <li> <p>VB Audio Cable   \ubb34\ub8cc \uccb4\ud5d8\ud310\uc758 \uacbd\uc6b0 \ucf00\uc774\ube14 1\uac1c\ub9cc \uc0ac\uc6a9 \uac00\ub2a5.   <code>\uc628\ub77c\uc778 \uc218\uc5c5\uc744 \ud558\uba70 \ub9c8\uc774\ud06c\ub85c \uc7a5\ub09c</code>\uacfc <code>\uc74c\uc545 \ubcf4\uc815</code> \ub458 \ub2e4 \ud558\ub824\uba74 \ucf00\uc774\ube14\uc774 \uc801\uc5b4\ub3c4 2\uac1c\ub294 \uc788\uc5b4\uc57c \ud588\ub2e4.</p> </li> <li> <p>ODeus ASIO Link Pro   ... \uadf8\ub0e5 \uc774\uac70 \uc4f8\uae4c?   \ub514\uc790\uc778\uc774 \ub9c8\uc74c\uc5d0 \uc548\ub4e4\uc5c8\ub2e4.</p> </li> <li> <p>Virtual Audio Cable   \uc5c4\uccad \uc88b\uc544\ubcf4\uc774\ub294\ub370 \uc720\ub8cc\uc784.</p> </li> </ul> <p>\uadf8\ub7ec\ub2e4\uac00 Synchronous Audio Router(SAR)\uc774\ub77c\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \ubc1c\uacac\ud588\uc5b4\uc694. \uc0ac\uc2e4 \uc624\ub514\uc624\ub97c \ub77c\uc6b0\ud305\ud558\uac70\ub098 \ubcf4\uc815\ud558\ub294 \uac70\ub294 FL\ub85c \ud558\uba74 \ub418\uae30 \ub54c\ubb38\uc5d0 \uc804\ud600 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. SAR\uc740</p> <ul> <li>\ub3d9\uc801\uc73c\ub85c \uac00\uc0c1 \uc624\ub514\uc624 \uc7a5\uce58 \ucd94\uac00 (\ubb34\uc81c\ud55c! \uadf8\ub0e5 \uc708\ub3c4\uc6b0\uac00 \ubc84\ud168\uc8fc\ub294 \ud55c \uacc4\uc18d \ub9cc\ub4e4 \uc218 \uc788\uc74c)</li> <li>\ubb34\ub8cc, \uc624\ud508\uc18c\uc2a4\uc784</li> <li>\uadf8\ub0e5 \ub9c8\uc74c\uc5d0 \ub4e6</li> <li>\uc131\ub2a5\uc774 \uc88b\uc740 \ud3b8\uc784</li> </ul> <p>\uc774\ub7ec\ud588\uace0, \uadf8\ub798\uc11c SAR\uc744 \uc124\uce58\ud558\uae30\ub85c \ub9c8\uc74c\uc744 \uba39\uc5c8\ub294\ub370...</p> <p>\uc774 \uc2dc\uc810\uc5d0,  UEFI \uc124\uc815\uc5d0\uc11c Secure Boot\ub97c \ucf1c\ub1a8\uc5c8\uace0 \uace7 \uc708\ub3c4\uc6b0 11\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc\ud560 \uacc4\ud68d\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubcf4\uc548\uc744 \uace0\ub824\ud558\uae30\ub3c4 \ud588\uae30 \ub54c\ubb38\uc5d0 <code>testsigning</code> \ubd80\ud2b8 \uc124\uc815\uc744 \ucf1c\ub294 \uac74 \uac00\ub2a5\ud55c \uc120\ud0dd\uc774 \uc544\ub2c8\uc5c8\uc2b5\ub2c8\ub2e4.</p> <p>\uadf8\ub7ec\ub2e4\uac00 \uc5b4\ub290 \ud55c \uc774\uc288\ub97c \ubcf4\uac8c \ub418\uc5c8\ub294\ub370</p> <p>UPDATE 3: SUCCESS!!!!!!!!! I am running the latest SAR in Reaper as we speak on windows 10 without testmode.</p> <p>\uc5b4\ub5a4 \uc0ac\ub78c\uc774 \uc131\uacf5\ud588\ub2e4\uace0 \ud574\uc694. \uadf8\ub798\uc11c \uc800\ub3c4 \ud574\ubcf4\uae30\ub85c \ud588\ub2f5\ub2c8\ub2e4. \u314b\u314b\u314b\u314b\u314b\u314b\u314b\u314b \ubc8c\uc368\ubd80\ud130 \ud5d8\ub09c\ud574\ubcf4\uc774\ub294...</p>"},{"location":"other/windows-self-driver-signing/#unsigned-prereleased-drivers-note","title":"Unsigned prereleased drivers note","text":"<p>Prereleases of SAR are unsigned. That means that it is required to enable testsigning boot option   to make Windows load the driver. Else the driver won't be loaded.</p>"},{"location":"other/windows-self-driver-signing/#_3","title":"\ubcf8\uaca9\uc801\uc73c\ub85c \uc2dc\uc791!","text":"<p>\uc81c\uac00 \ucc38\uc870\ud55c \ubb38\uc11c\ub4e4\uc740 \uc800\uae30 \ub9d0\ud55c '\uc5b4\ub290 \ud55c \uc774\uc288'\uc5d0 \uc124\uba85\ub418\uc5b4 \uc788\ub294 \ubc29\ubc95\uc744 (\uc544\uc8fc \ub9ce\uc774) \ubcc0\ud615\ud574\uc11c OpenSSL\uc744 \uc4f4 \ubc29\ubc95\uc774\uc5c8\uc5b4\uc694. \uc124\uba85\uc774 \uc544\uc8fc \ubd88\uce5c\uc808\ud558\ub354\ub77c\uace0\uc694. \uc2e4\uc81c\ub85c \ubd88\uce5c\uc808\ud55c\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc (\ud558\uc9c0\ub9cc <code>its confusing and you have to jump back and forth between his guide and an older one</code> \ub77c\ub294 \ub9d0\uc774 \uc788\uc5c8\ub2e4\ub9cc) \uc81c\uac00 \ud55c\uad6d\uc778\uc774\ub780 \uc810\uc744 \uac10\uc548\ud558\uba74..</p> <ul> <li>\uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc790\uc2e0\uc758 \uae30\uae30\uc5d0\uc11c UEFI \ud50c\ub7ab\ud3fc \ud0a4\ub97c \uc124\uc815\ud558\ub294 \ubc29\ubc95\uc774 \uc788\ub294\uc9c0, \uc5b4\ub5bb\uac8c \ud558\ub294\uc9c0\ub97c \ubbf8\ub9ac \uc54c\uc544\ubcf4\uae30\ub97c \uad8c\uc7a5\ud569\ub2c8\ub2e4. UEFI\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc774\uac78 \ud560 \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.</li> <li>\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 UEFI\uc758 \ud50c\ub7ab\ud3fc \ud0a4\ub97c \uc124\uc815\ud558\uac70\ub098, EFI \ubd80\ud2b8 \ud30c\ud2f0\uc158\uc744 \uac74\ub4dc\ub9ac\uace0 \uc708\ub3c4\uc6b0 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\ub97c \uc218\uc815\ud558\ub294   \ub4f1\uc758 \uc704\ud5d8\ud55c \uc9d3\uc744 \uc544\uc8fc \ub9ce\uc774 \ud569\ub2c8\ub2e4. \ud544\uc694\ud558\ub2e4\uba74 \ubc31\uc5c5\uc744 \ud574\ub450\uae38 \uad8c\uc7a5\ud569\ub2c8\ub2e4. \ub77c\uace0 \ud574\ub193\uace0 \ubcf8\uc778\uc740 \ubc31\uc5c5 \uc548\ud568</li> </ul> <p>\ucc38\uace0</p> <p>\uc77c\ub2e8 \uc774\uac78 \ud558\uae30 \uc804\uc5d0 \uc704\uc5d0 \ucc38\uc870\ud55c \uc774\uc288\ub791 \uac70\uae30\uc11c \ucc38\uc870\ud558\ub294 \uc774 \ub9ac\ud3ec\ub294 \ud55c\ubc88 \ud6d1\uc5b4\ubcf4\uc2dc\ub294 \uac78 \ucd94\ucc9c\ub4dc\ub9bd\ub2c8\ub2e4.</p>"},{"location":"other/windows-self-driver-signing/#_4","title":"\uc778\uc99d\uc11c \ub9cc\ub4e4\uae30 / \uc124\uc815","text":"<p>\uc778\uc99d\uc11c\ub97c \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 \uc774 \ubb38\uc11c\uc5d0 \uc798 \uc124\uba85\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc800 \ubc29\ubc95\ub300\ub85c \ud588\ub354\ub2c8 \ub0b4 UEFI(Dell\uc784)\uac00 \uc778\uc99d\uc11c\ub97c \ubc49\uae38\ub798 OpenSSL\uc744 \uc368\uc11c \ub2e4\uc2dc \uc2dc\ub3c4\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. (\uc774\uc81c\uc640\uc11c \ubcf4\ub2c8 \ub2e4\uc2dc \uc2dc\ub3c4\ud560 \ud544\uc694\uac00 \uc788\ub294\uc9c0\ub294 \uc758\ubb38\uc774\uc9c0\ub9cc...)</p> <p>\uc6b0\ub9ac\uac00 \ud560 \uac83\uc740 \uc774 \uae30\uae30\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 \uc778\uc99d\uc11c\ub97c \ub9cc\ub4dc\ub294 \uac83\uc778\ub370, \uc774 \uae30\uae30\uc5d0\uc11c\ub9cc \uc791\ub3d9\ud558\ub294 '\uac00\uc0c1\uc758 \uc778\uc99d\uc11c \ud0a4 \ubc1c\uae09 \uae30\uad00' \uac19\uc740 \uac78 \ub9cc\ub4e0 \ub2e4\uc74c \uadf8 \uae30\uad00\uc758 \uc778\uc99d\uc11c\ub97c \uc774\uc6a9\ud574\uc11c UEFI \ud50c\ub7ab\ud3fc \ud0a4 \uc778\uc99d\uc11c\uc640 \ucee4\ub110 \ubaa8\ub4dc \ub4dc\ub77c\uc774\ubc84 \uc778\uc99d\uc11c\ub97c \ub9cc\ub4e4 \uac83\uc785\ub2c8\ub2e4. \ucc38\uace0\ub85c \uc708\ub3c4\uc6b0 11\uc5d0\uc11c\ub3c4 \uc798 \ub41c\ub2e4\uace0 \ud569\ub2c8\ub2e4.</p> <p>\ud30c\uc6cc\uc178\uc744 \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \uc2e4\ud589\ud574\uc8fc\uc138\uc694. (\uc778\uc99d\uc11c \ub9cc\ub4e4 \ub54c\uae4c\uc9c0\ub294 \ud544\uc694\uc5c6\ub294\ub370 \uadf8 \uc774\ud6c4\uc5d0 \ud544\uc694\ud55c \uc791\uc5c5\uc774 \uba87 \uac1c \uc788\uc2b5\ub2c8\ub2e4.) \uc774 \uae00\uc740 \ud30c\uc6cc\uc178\uc744 \uae30\uc900\uc73c\ub85c \uc124\uba85\ud569\ub2c8\ub2e4. cmd\ub77c\uba74 \uc54c\uc544\uc11c \ubc14\uafb8\uc2dc\uae38... (\uc608\ub97c \ub4e4\uc5b4 \uc904 \ub05d\uc5d0 <code>\\</code> `\uac00 \uc788\ub2e4\uba74 \uadf8\uac78 \uc9c0\uc6b0\uace0 \ub2e4\uc74c\uc904\uacfc \ud569\uce58\uba74 \ub41c\ub2e4.)</p> <p>\uc544\ub798\uc758 \uc9c0\uc2dc\uc0ac\ud56d\uc744 \ub2e4 \ub530\ub978\ub2e4\uba74 \uc544\ub798\uc640 \uac19\uc740 \ud30c\uc77c \uad6c\uc870\uac00 \ub9cc\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. <pre><code>root-ca\n- private.key\n- cert-request.conf\n- cert-request.csr\n- cert.cer\n- serial.srl\nplatform-key\n- private.key\n- cert-request.conf\n- cert-request.csr\n- cert.cer\n- PK.unsigned.esl\n- PK.esl\n- PK.old.esl\nkernel-mode\n- private.key\n- cert-request.conf\n- cert-request.csr\n- cert.cer\n</code></pre></p>"},{"location":"other/windows-self-driver-signing/#openssl","title":"OpenSSL \uc124\uce58","text":"<p>\uae43\uc744 \uc124\uce58\ud560 \ub54c \uae30\ubcf8\uac12\uc73c\ub85c OpenSSL\uc774 \ubc88\ub4e4\ub418\uc5b4 \uc788\ub294\ub370, \uadf8\uac78 \uc4f0\uace0\uc2f6\ub2e4\uba74 \uc774 StackOverflow \ub2f5\ubcc0\uc744 \ucc38\uace0\ud558\uc138\uc694.</p> <p>\uc800\ub294 \uac4d \uae54\uace0 \uc2f6\uc5b4\uc11c \uac4d \uae54\uc558\uc5b4\uc694. Chocolatey\uac00 \uae54\ub824\uc788\ub294 \uc0ac\ub78c\uc774\ub77c\uba74 \uad00\ub9ac\uc790 \uad8c\ud55c \uc178\uc5d0\uc11c <code>choco install openssl</code>\uc744 \uce58\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. \ud130\ubbf8\ub110\uc744 \uaed0\ub2e4 \ucf1c\uae30 \uc2eb\uc73c\uba74 <code>refreshenv</code>\ub9cc \uce58\uba74 \ub3fc\uc694.</p>"},{"location":"other/windows-self-driver-signing/#root-ca-certificate","title":"'\uc778\uc99d\uc11c \ubc1c\uae09 \uae30\uad00' (Root CA Certificate) \uc0dd\uc131","text":"<p>\uc5b4\ub5a4 Root CA \uc790\uccb4\uc758 \uc778\uc99d\uc11c\uac00 \uc2e0\ub8b0\ub41c\ub2e4\uba74 \uadf8 CA\uac00 \ubc1c\uae09\ud55c \ub2e4\ub978 \uc778\uc99d\uc11c\ub3c4 \ub9c8\ucc9c\uac00\uc9c0\ub85c \uc2e0\ub8b0\ub420 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 WIZVERA\ub77c\ub294 CA \uc778\uc99d\uae30\uad00\uc744 \ubbff\uc744 \uc218 \uc788\ub2e4\uba74, \uadf8 \uc778\uc99d\uae30\uad00\uc5d0\uc11c \ubc1c\uae09\ud55c \uc778\uc99d\uc11c\ub3c4 \ubbff\uc744 \uc218 \uc788\ub294\ub370\uc694, \uadf8\ub798\uc11c \uc6b0\ub9ac\uac00 HTTPS \uc11c\uba85\uc744 \ub9cc\ub4e4\ub824\uba74 \uc5b4\ub5a4 \uc778\uc99d\uc11c \ubc1c\uae09\uae30\uad00\uc5d0\uc11c \ub3c8\uc744 \uc8fc\uace0(\ubb3c\ub860 \ubb34\ub8cc\ub3c4 \uc788\uc9c0\ub9cc) \uc778\uc99d\uc11c\ub97c \ubc1c\uae09\ubc1b\ub294 \uac83\uc774\uc5d0\uc694.</p> <p><code>root-ca</code> \ud3f4\ub354\ub97c \ub9cc\ub4e4\uace0 \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\uc138\uc694. <pre><code>cd root-ca\n\n# \ube44\uacf5\uac1c \ud0a4 \uc0dd\uc131\ud558\uae30\nopenssl genrsa -aes256 -out private.key 2048\n</code></pre> \uc774 \uba85\ub839\uc5b4\ub97c \uc124\uba85\ud574\ubcf4\uc790\uba74,</p> <ul> <li><code>-aes256</code>: \uc0dd\uc131\ub418\ub294 \ube44\uacf5\uac1c \ud0a4\ub97c \uc554\ud638\ud654\ud574\uc11c \ubcf4\uad00\ud568. \uc989 \uc554\ud638\ub97c \uc554\ud638\ud654\ud558\ub294 \uc635\uc158\uc778 \uac83. \ube44\ubc00\ubc88\ud638\ub97c   \uc785\ub825\ud558\ub294 \uac8c \uadc0\ucc2e\ub2e4\uba74 \uc0dd\ub7b5\ud574\ub3c4 \ub418\uae34 \ud55c\ub370 \uac00\ub2a5\ud558\uba74 \uc124\uc815\ud558\ub294 \uac8c \uc88b\uc544\uc694.</li> <li><code>-out private.key</code>: 'private.key'\ub77c\ub294 \ud30c\uc77c\ub85c \ub0b4\ubcf4\ub0c4.</li> <li><code>2048</code>: \ud0a4\uc758 \uae38\uc774\ub97c 2048\ube44\ud2b8\ub85c.</li> </ul> <p>\uadf8 \ub2e4\uc74c, \uc544\ub798 \ub0b4\uc6a9\uc744 \ubcf5\ubd99\ud55c \ud6c4 \uc6d0\ud558\ub294 \ub0b4\uc6a9\uc740 \uc218\uc815\ud558\uace0 <code>cert-request.conf</code>\uc774\ub77c\ub294 \uc774\ub984\uc73c\ub85c \uc800\uc7a5\ud558\uc138\uc694. countryName\uac19\uc740 \uac83\ub4e4\uc740 \uc218\uc815\ud558\uac70\ub098 \uc9c0\uc6b0\uc9c0 \ub9d0\uace0, \ub300\uc2e0 countryName_default\uac19\uc740 \uac78 \uc218\uc815\ud558\uba74 \ub429\ub2c8\ub2e4. <pre><code>[ req ]\ndefault_bits = 2048\ndefault_md = sha256\ndefault_keyfile = private.key\ndistinguished_name = localhost_root_ca\nextensions = v3_ca\nreq_extensions = v3_ca\n\n[ v3_ca ]\nbasicConstraints = critical, CA:TRUE # , pathlen:0 # \uc774 \uc635\uc158\uc740 '\uc911\uac04 CA'\uc758 \ucd5c\ub300 \uac1c\uc218\ub97c \uc870\uc808\ud560 \uc218 \uc788\ub2e4.\nsubjectKeyIdentifier = hash\nkeyUsage = keyCertSign, cRLSign\n\n[ localhost_root_ca ]\ncountryName = Country Name (2 letter code)\ncountryName_default = # \uae30\uad00\norganizationName = Organization Name (eg, company)\norganizationName_default = Localhost\n\n# \uae30\uad00 \ubd80\uc11c\norganizationalUnitName = Organizational Unit Name (eg, section)\norganizationalUnitName_default  = # \uc774 \uc778\uc99d\uc11c\uc758 \uc774\ub984\ncommonName = \"Common Name (eg, your name or your server's hostname)\"\ncommonName_default = Localhost Root Certification Authority\n</code></pre></p> <p>\ud130\ubbf8\ub110\ub85c \ub3cc\uc544\uc640\uc11c \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud574\uc11c \uc778\uc99d\uc11c \uc694\uccad \ud30c\uc77c(CSR)\uc744 \ub9cc\ub4e4\uc73c\uc138\uc694. <pre><code>openssl req -new -key private.key -out cert-request.csr -config cert-request.conf\n</code></pre></p> <p>\uc544\ub798\ucc98\ub7fc \ub730 \uac83\uc785\ub2c8\ub2e4. <pre><code>Enter pass phrase for private.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) []:\nOrganization Name (eg, company) [Localhost]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) [Localhost Root Certification Authority]:\n</code></pre> \ube44\ubc00\ubc88\ud638\ub97c \uc785\ub825\ud558\uace0, \ub098\uba38\uc9c0\ub294 <code>cert-request.conf</code> \ud30c\uc77c\uc5d0\uc11c \uc124\uc815\ud588\uae30 \ub54c\ubb38\uc5d0 \uc5d4\ud130\ub97c \uc5f0\ud0c0\ud574\uc8fc\uba74 \uc790\ub3d9\uc73c\ub85c \ub118\uc5b4\uac11\ub2c8\ub2e4.</p> <p>\uadf8\ub7fc <code>cert-request.csr</code> \ud30c\uc77c\uc774 \uc0dd\uacbc\uc744 \uac83\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub85c \uc2e4\uc81c \uc778\uc99d\uc11c\ub97c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. <pre><code>openssl x509 -req -days 18250 -extensions v3_ca `\n  -in cert-request.csr -signkey private.key `\n  -out cert.cer -extfile cert-request.conf\n</code></pre></p> <ul> <li><code>-days 18250</code>\uc5d0\uc11c 18250\uc744 \uc6d0\ud558\ub294 \ub0a0\uc9dc\ub85c \uc218\uc815\ud574\uc8fc\uba74 \ub429\ub2c8\ub2e4. 18250\uc77c\uc740 \uc57d 50\ub144\uc785\ub2c8\ub2e4. (\uc815\ud655\ud558\uac8c\ub294 365 * 50)</li> <li><code>-extensions v3_ca</code>\ub294 cert-request.conf\uc5d0\uc11c <code>[ v3_ca ]</code>\ub77c\ub294 \ubd80\ubd84\uc5d0\uc11c \uc815\ubcf4\ub97c \ubd88\ub7ec\uc624\ub3c4\ub85d \ud574\uc90d\ub2c8\ub2e4</li> <li>\ub098\uba38\uc9c0\ub294 \ub2e4 \ud30c\uc77c\uc774\ub984\uc744 \ub123\uc5b4\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4.</li> </ul> <p>\uc774\uc81c \ub098\uc628 <code>cert.cer</code> \ud30c\uc77c\uc744 \uc708\ub3c4\uc6b0\uc5d0 \ubc15\uc544\uc918\uc57c \ud569\ub2c8\ub2e4. \uc774 \uc778\uc99d\uc11c\ub97c \ub354\ube14\ud074\ub9ad\ud574\uc11c \uc5f4\uace0 '\uc778\uc99d\uc11c \uc124\uce58' &gt; \uc800\uc7a5\uc18c \uc704\uce58\ub97c '\ub85c\uceec \ucef4\ud4e8\ud130'\ub85c &gt; '\ubaa8\ub4e0 \uc778\uc99d\uc11c\ub97c \ub2e4\uc74c \uc800\uc7a5\uc18c\uc5d0 \uc800\uc7a5'\uc5d0\uc11c '\ucc3e\uc544\ubcf4\uae30'\uc758 '\uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ub8e8\ud2b8 \uc778\uc99d \uae30\uad00(Trusted Root Certification Authority)'\ub97c \uc120\ud0dd\ud558\uace0 \uc124\uce58\ud558\uba74 \ub429\ub2c8\ub2e4.</p> <p>\uc774\uc81c UEFI \ud50c\ub7ab\ud3fc \ud0a4 \uc778\uc99d\uc11c\uc640 \ucee4\ub110 \ubaa8\ub4dc \ub4dc\ub77c\uc774\ubc84 \uc778\uc99d\uc11c\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4.</p>"},{"location":"other/windows-self-driver-signing/#uefi","title":"UEFI \ud50c\ub7ab\ud3fc \ud0a4 \uc778\uc99d\uc11c \uc778\uc99d\uc11c \ub9cc\ub4e4\uae30","text":"<p>\uc0c1\uc704 \ud3f4\ub354\uc5d0\uc11c platform-key \ud3f4\ub354\ub97c \ub9cc\ub4e4\uace0 \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.</p> <pre><code>cd ../platform-key\n\n# \uac1c\uc778\ud0a4 \uc0dd\uc131\nopenssl genrsa -aes256 -out private.key 2048\n</code></pre> <p>\uadf8 \ub2e4\uc74c, \ub610 \ub2e4\uc2dc \uc774 \ud3f4\ub354\uc5d0 <code>cert-request.conf</code>\ub97c \ub9cc\ub4e4\uace0 \ubcf5\ubd99\ud558\uc138\uc694.</p> <pre><code>[ req ]\ndefault_bits = 2048\ndefault_md = sha256\ndefault_keyfile = private.key\ndistinguished_name = localhost_uefi_platform_key\nextensions = v3_req\n\n[ v3_req ]\nbasicConstraints = CA:FALSE\nauthorityKeyIdentifier = keyid, issuer\nsubjectKeyIdentifier = hash\nkeyUsage = digitalSignature\n\n[ localhost_uefi_platform_key ]\ncountryName = Country Name (2 letter code)\ncountryName_default = # \uae30\uad00\norganizationName = Organization Name (eg, company)\norganizationName_default = Localhost\n\n# \uae30\uad00 \ubd80\uc11c\norganizationalUnitName = Organizational Unit Name (eg, section)\norganizationalUnitName_default  = # \uc774 \uc778\uc99d\uc11c\uc758 \uc774\ub984\ncommonName = \"Common Name (eg, your name or your server's hostname)\"\ncommonName_default = Localhost UEFI Platform Key Certificate\n</code></pre> <p>\uc544\ub798 \uba85\ub839\uc5b4\ub85c \uc778\uc99d\uc11c \ubc1c\uae09 \uc694\uccad(CSR) \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. <pre><code>openssl req -new -key private.key -out cert-request.csr -config cert-request.conf\n</code></pre> \ub9c8\ucc9c\uac00\uc9c0\ub85c \ube44\ubc88\uc744 \uc785\ub825\ud558\uace0, \uc5d4\ud130\ub97c \uc5f0\ud0c0\ud574\uc90d\ub2c8\ub2e4.</p> <p>\uc774\uc81c \uc778\uc99d\uc11c\ub97c \ub9cc\ub4e4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. <pre><code>openssl x509 -req -days 18250 -extensions v3_req `\n  -in cert-request.csr `\n  -CA ../root-ca/cert.cer -CAcreateserial -CAserial ../root-ca/serial.srl `\n  -CAkey ../root-ca/private.key `\n  -extfile cert-request.conf -out cert.cer\n</code></pre></p> <ul> <li><code>-CA ...</code>: CA \uc778\uc99d\uc11c\uc758 \uacbd\ub85c</li> <li><code>-CAkey ...</code>: CA \ube44\uacf5\uac1c \ud0a4\uc758 \uacbd\ub85c</li> <li><code>-CAcreateserial -CAserial ../root-ca/serial.srl</code>: serial \ud30c\uc77c\uc744 \ub9cc\ub4e4\uace0 serial.srl \ud30c\uc77c\uc5d0   \uc800\uc7a5. \uc774 \ub8e8\ud2b8 \uc778\uc99d\uc11c\ub85c \ub9cc\ub4dc\ub294 \uc778\uc99d\uc11c\ub4e4\uc758 \uc2dc\ub9ac\uc5bc \ub118\ubc84\uac00 \uacb9\uce58\uc9c0 \uc54a\uac8c \ud574\uc90d\ub2c8\ub2e4.   \ub9cc\uc57d \uc774 \uba85\ub839\uc5b4\ub97c \uc5ec\ub7ec\ubc88 \uc2e4\ud589\ud560 \ub54c\uc5d0\ub294 serial.srl \ud30c\uc77c\uc774 \uc774\ubbf8 \uc788\uae30 \ub54c\ubb38\uc5d0 <code>-CAcreateserial</code>\uc740 \ube7c\uc57c \ud569\ub2c8\ub2e4.</li> </ul> <p>\ucd94\uac00\ub85c, \ub098\uc911\uc5d0 \uc708\ub3c4\uc6b0 \ub4dc\ub77c\uc774\ubc84\ub098 'Si Policy'\ub97c \uc11c\uba85\ud560 \ub54c \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0(signtool\uc744 \uc4f0\uae30 \uc704\ud574) private.key\ub97c .pfx \ud30c\uc77c\ub85c \ubcc0\ud658\ud574\uc918\uc57c \ud569\ub2c8\ub2e4.</p> <pre><code>openssl pkcs12 -export -out private.pfx -inkey private.key -in cert.cer\n</code></pre>"},{"location":"other/windows-self-driver-signing/#uefi-pk","title":"UEFI \ud38c\uc6e8\uc5b4\uc758 \ud50c\ub7ab\ud3fc \ud0a4(PK) \uc124\uc815","text":"<p> <p>\uc9c0\ub9b0\ub2e4</p></p> <p>\uc5ec\uae30\uc11c\ub294 \ubcf8\uc778\uc758 \ucef4\ud4e8\ud130\ub9c8\ub2e4 \uc4f8 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc0c1\uc774\ud569\ub2c8\ub2e4. \uc800\uc758 \uacbd\uc6b0 Dell \ub178\ud2b8\ubd81\uc774\uc5c8\ub294\ub370, UEFI \uc124\uc815\uc5d0 'Expert Key Management'\ub77c\ub294 PK\ub97c \uc124\uc815\ud560 \uc218 \uc788\ub294 \uacf3\uc774 \uc788\uc5c8\ub294\ub370 \uacb0\ub860\uc801\uc73c\ub85c\ub294 \uc544\uc8fc \uc798 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ubb34\uc5b8\uac00\uac00 \uc2ec\ud558\uac8c \uace0\uc7a5\ub09c \ub4ef? \ud558\uc9c0\ub9cc! \ud30c\uc6cc\uc178 \uba85\ub839\uc5b4\uc778 <code>Set-SecureBootUefi</code>\uc744 \uc368\uc11c \uc791\ub3d9\ud558\uac8c \ud588\uc2b5\ub2c8\ub2e4.</p> <p>\uc77c\ub2e8 \ud55c\ubc88\uc5d0 \ud0a4\ub97c \ub2e4 \ub9cc\ub4e4\uc5b4\ub193\uace0 \uc774\uac78 \ud558\uace0 \uc2f6\ub2e4\uba74 \uc544\ub798 \ubb38\ub2e8 '\ucee4\ub110 \ubaa8\ub4dc \ub4dc\ub77c\uc774\ubc84 \uc778\uc99d\uc11c \ub9cc\ub4e4\uae30'\ub97c \uba3c\uc800 \ud574\ub3c4 \ub429\ub2c8\ub2e4. \ub2e4\ub9cc \ub2e4 \ub9cc\ub4e4\uc5b4\ub193\uace0 \uc124\uc815\uc744 \ubabb\ud55c\ub2e4\uba74 \uc0c1\uc2e4\uac10\uc774 \ud074\ud14c\ub2c8 \uc774\uac78 \uba3c\uc800 \ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4.</p> <p>\uc6b0\uc120 \ubcf8\uc778 UEFI \uc124\uc815\uc5d0\uc11c \uc774\uac78 \uc815\ud558\ub294 \uae30\ub2a5\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud574\ubcf4\uace0, \uc788\ub2e4\uba74 \uadf8 \ubc29\ubc95\uc744 \uc2dc\ub3c4\ud574\ubcf4\uc138\uc694. \uc774 \ubc29\ubc95\ub3c4 UEFI\uc5d0 \ub530\ub77c \ub420 \uc218\ub3c4, \uc548\ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>\ud544\uc790\ub294 \uc544\ub798\uc758 \ud30c\uc6cc\uc178 \uba85\ub839\uc5b4\ub85c \uc124\uc815\ud558\ub294 \ubc29\ubc95\uc744 \uc4f8 \ub54c WSL\uc744 \ud1b5\ud574 <code>efitools</code>\ub97c \uc124\uce58\ud574\uc11c \ud588\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4 \uc800 efitools\uc758 \uc708\ub3c4\uc6b0\uc6a9 \ub300\uc548\uc744 \ucc3e\uc9c0 \ubabb\ud574\uc11c \uc774\ub807\uac8c \ud55c \uac83\uc778\ub370. \ub9cc\uc57d \ub300\uc548\uc744 \ucc3e\uc558\ub2e4\uba74 \uc774 \ubb38\uc11c\uc5d0 PR \uc880...</p> <p>\uc774 \ubc29\ubc95\uc744 \uc2dc\ub3c4\ud558\uae30 \uc804\uc5d0 UEFI \uc124\uc815\uc5d0\uc11c Secure Boot Mode\ub97c \uc801\ub2f9\ud558\uac8c \ubc14\uafd4\uc8fc\uc138\uc694. \uae30\ubcf8 \ubaa8\ub4dc\uc5d0\uc11c\ub294 PK \uac19\uc740 \ud0a4\ub4e4\uc744 \ubc14\uafb8\uc9c0 \ubabb\ud558\uac8c \ub9c9\uc544\ub1a8\uc2b5\ub2c8\ub2e4. \uc81c UEFI(Dell)\uc758 \uacbd\uc6b0 'Deploy Mode'\uc640 'Audit Mode'\uac00 \uc788\uc5c8\ub294\ub370 Audit Mode\ub85c \ubc14\uafb8\uace0 \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\ub2c8 \ub410\uc2b5\ub2c8\ub2e4.</p> <p>\uc77c\ub2e8 WSL \ud130\ubbf8\ub110\ub85c \ub4e4\uc5b4\uac11\ub2c8\ub2e4.</p> <p><pre><code># platform-key \ud3f4\ub354\ub85c \uc774\ub3d9\ncd $(wslpath \"platform-key \ud3f4\ub354\uc758 \uacbd\ub85c\")\n\n# esl \ud30c\uc77c \uc0dd\uc131\ncert-to-efi-sig-list -g \"$(cat /proc/sys/kernel/random/uuid)\" cert.cer PK.unsigned.esl\n\n# esl \ud30c\uc77c \uc11c\uba85\nsign-efi-sig-list -k private.key -c cert.cer PK PK.unsigned.esl PK.esl\n</code></pre> \ucc38\uace0\ub85c .esl \ud30c\uc77c\uc740 EFI Signature List\uc758 \uc57d\uc790\ub85c, UEFI \ud38c\uc6e8\uc5b4\uc5d0\uc11c \uc11c\uba85\uc744 \uc800\uc7a5\ud558\ub294 \ubc29\uc2dd\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. esl \ud30c\uc77c\uc744 \uc11c\uba85\ud558\uba74 \ubcf4\uc548\uc774 \ub354 \uc88b\uc73c\ub824\ub098?</p> <p>\uc124\uc815\ud558\uae30 \uc804\uc5d0 esl \ud30c\uc77c\uc744 \ubc31\uc5c5\ud569\uc2dc\ub2e4. <pre><code>Get-SecureBootUefi -Name PK -OutputFilePath PK.old.esl\n</code></pre></p> <p>\uadf8 \ub2e4\uc74c \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \ud30c\uc6cc\uc178\uc744 \uc5f4\uace0(\uc774\ubbf8 \uad00\ub9ac\uc790 \uad8c\ud55c\uc774\uba74 \uc0c8\ub85c \uc5f4\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4.) platform-key \ud3f4\ub354\ub85c \uc774\ub3d9\ud55c \ud6c4 \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud569\ub2c8\ub2e4.</p> <pre><code>Set-SecureBootUEFI -Name PK -SignedFilePath PK.esl -ContentFilePath PK.unsigned.esl -Time $(Get-Date)\n</code></pre> <p>\ub9cc\uc57d <code>Set-SecureBootUEFI: \uc798\ubabb\ub41c \uc778\uc99d \ub370\uc774\ud130: 0xC0000022</code>\ub77c\uace0 \ub72c\ub2e4\uba74 \ud0a4\ub97c \uc798\ubabb \ub123\uc5b4\uc92c\uac70\ub098, Secure Boot Mode\ub97c \ubc14\uafb8\uc9c0 \uc54a\uc558\uac70\ub098, UEFI\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uac70\uc5d0\uc694. \ub9cc\uc57d \uc131\uacf5\ud588\ub2e4\uba74, \ucd95\ud558\ud569\ub2c8\ub2e4. \uc774\uc81c \ucef4\ud4e8\ud130\uc758 UEFI\ub294 \uc6b0\ub9ac\uc758 \uc778\uc99d\uc11c \ubc1c\uae09 \uae30\uad00(CA)\uc744 \uc2e0\ub8b0\ud560 \uac70\uc5d0\uc694.</p> <p>\ucd94\uac00: \ub178\ud2b8\ubd81\uc744 \ubc14\uafb8\uac8c \ub418\uc5b4\uc11c \uc0bc\uc131 \uac24\ub7ed\uc2dc \ubd81\uc5d0\uc11c \ub2e4\uc2dc \ud55c\ubc88 \uc2dc\ub3c4\ud574\ubd24\uc5b4\uc694. \uc5ec\uae30\uc11c\ub294 Audit Mode/Deploy Mode \uac19\uc740 \uad6c\ubd84\uc774 \uc5c6\uace0, \ubc14\uc774\uc624\uc2a4 \uc124\uc815\uc5d0\uc11c \uc9c1\uc811 \ud0a4\ub97c \ubc14\uafb8\uac8c \ub418\uc5b4\uc788\ub354\ub77c\uace0\uc694. \uadf8\ub7f0\ub370 \ub4dc\ub77c\uc774\ube0c \ubaa9\ub85d\uc5d0\uc11c D: \ub4dc\ub77c\uc774\ube0c\uac00 \uc548\ub728\uae38\ub798 \uc774\uc720\ub97c \uc0dd\uac01\ud574\ubd24\ub294\ub370 \ud30c\ud2f0\uc158 \ubaa9\ub85d\ub4e4\uc744 \ubcf4\ub2c8 \ub531 FAT32 \ud615\uc2dd\uc758 \ud30c\ud2f0\uc158\ub9cc \ub728\ub294 \uac83 \uac19\ub354\ub77c\uace0\uc694. \uadf8\ub798\uc11c USB \uaf42\uae30\ub294 \uadc0\ucc2e\uc558\uace0 D \ub4dc\ub77c\uc774\ube0c\ub97c shrink\ud558\uace0, \uadf8 \ub514\uc2a4\ud06c\uc5d0\uc11c \uc790\uadf8\ub9cc \ud30c\ud2f0\uc158 \ud558\ub098\ub97c \ud30c\uace0 FAT32\ub85c \ud3ec\ub9f7\ud558\uace0 \ub9c8\uc6b4\ud2b8\ud574\uc11c \ud0a4\ub97c \ub123\uc5b4\ub193\uc740 \ub2e4\uc74c \ub2e4\uc2dc \ubc14\uc774\uc624\uc2a4 \uc124\uc815\uc5d0 \ub4e4\uc5b4\uac00\ub2c8\uae4c \ub728\ub354\ub77c\uace0\uc694.</p>"},{"location":"other/windows-self-driver-signing/#_5","title":"\ucee4\ub110 \ubaa8\ub4dc \ub4dc\ub77c\uc774\ubc84 \uc778\uc99d\uc11c \ub9cc\ub4e4\uae30","text":"<p>\uc0c1\uc704 \ud3f4\ub354\uc5d0\uc11c kernel-mode-driver \ud3f4\ub354\ub97c \ub9cc\ub4e4\uace0 \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.</p> <pre><code>cd ../kernel-mode-driver\n\n# \uac1c\uc778\ud0a4 \uc0dd\uc131\nopenssl genrsa -aes256 -out private.key 2048\n</code></pre> <p>\uadf8 \ub2e4\uc74c, \ub610\ub610 \ub2e4\uc2dc \uc774 \ud3f4\ub354\uc5d0 <code>cert-request.conf</code>\ub97c \ub9cc\ub4e4\uace0 \ubcf5\ubd99 \u3131\u3131</p> <pre><code>[ req ]\ndefault_bits = 2048\ndefault_md = sha256\ndefault_keyfile = private.key\ndistinguished_name = localhost_kernel_mode_driver\nextensions = v3_req\n\n[ v3_req ]\nbasicConstraints = CA:FALSE\nauthorityKeyIdentifier = keyid, issuer\nsubjectKeyIdentifier = hash\nkeyUsage = digitalSignature\nextendedKeyUsage = codeSigning\n\n[ localhost_kernel_mode_driver ]\ncountryName = Country Name (2 letter code)\ncountryName_default = # \uae30\uad00\norganizationName = Organization Name (eg, company)\norganizationName_default = Localhost\n\n# \uae30\uad00 \ubd80\uc11c\norganizationalUnitName = Organizational Unit Name (eg, section)\norganizationalUnitName_default  = # \uc774 \uc778\uc99d\uc11c\uc758 \uc774\ub984\ncommonName = \"Common Name (eg, your name or your server's hostname)\"\ncommonName_default = Localhost Kernel Mode Driver Certificate\n</code></pre> <p>\uc544\ub798 \uba85\ub839\uc5b4\ub85c \uc778\uc99d\uc11c \ubc1c\uae09 \uc694\uccad(CSR) \ud30c\uc77c\uc744 \ub9cc\ub4e4\uc5b4 \uc8fc\uc138\uc694. <pre><code>openssl req -new -key private.key -out cert-request.csr -config cert-request.conf\n</code></pre> \ub9c8\ucc9c\uac00\uc9c0\ub85c \ube44\ubc88\uc744 \uc785\ub825\ud558\uace0, \uc5d4\ud130\ub97c \uc5f0\ud0c0\ud574 \uc90d\ub2c8\ub2e4.</p> <p>\uc774\uc81c \uc778\uc99d\uc11c\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. <pre><code>openssl x509 -req -days 18250 -extensions v3_req `\n  -in cert-request.csr `\n  -CA ../root-ca/cert.cer -CAserial ../root-ca/serial.srl `\n  -CAkey ../root-ca/private.key `\n  -extfile cert-request.conf -out cert.cer\n</code></pre></p> <ul> <li><code>-CAserial ../root-ca/serial.srl</code>: \ub9cc\uc57d \uc774 \uba85\ub839\uc5b4\ub97c \uc704\uc758 UEFI \ud50c\ub7ab\ud3fc \ud0a4\ub97c \ub9cc\ub4e4\uae30 \uc804\uc5d0   \uc2e4\ud589\ud560 \ub54c\uc5d0\ub294 serial.srl \ud30c\uc77c\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0 <code>-CAcreateserial</code>\uc744 \ubd99\uc5ec\uc57c \ud569\ub2c8\ub2e4.</li> </ul> <p>\ud55c\ubc88 \ub354, \ub098\uc911\uc5d0 \uc708\ub3c4\uc6b0 \ub4dc\ub77c\uc774\ubc84\ub098 'Si Policy'\ub97c \uc11c\uba85\ud560 \ub54c \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0(signtool\uc744 \uc4f0\uae30 \uc704\ud574) private.key\ub97c .pfx \ud30c\uc77c\ub85c \ubcc0\ud658\ud574\uc918\uc57c \ud569\ub2c8\ub2e4.</p> <pre><code>openssl pkcs12 -export -out private.pfx -inkey private.key -in cert.cer\n</code></pre> <p>\uc774\uc81c \ud544\uc694\ud55c \uc138 \uc778\uc99d\uc11c\ub97c \uc804\ubd80 \ub9cc\ub4e4\uc5b4 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.</p>"},{"location":"other/windows-self-driver-signing/#sign-policy-si-policy","title":"\uc11c\uba85 \uc815\ucc45(Sign Policy; Si Policy) \uc124\uc815","text":"<p>\uc6d0\ub798 \uc11c\uba85 \uc815\ucc45\uc744 \ub2f4\uc740 xml \ud30c\uc77c\uc744 \ub9cc\ub4e0 \ud6c4 \ubc14\uc774\ub108\ub9ac \ud30c\uc77c\ub85c \ub9cc\ub4e4\uc5b4\uc57c \ud588\ub294\ub370, \uc774\uac74 \uc708\ub3c4\uc6b0 Enterprise/Education Edition\uc5d0\uc11c\ub9cc \ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 (\uadfc\ub370 \uc65c \ub0b4 \ucef4\ud4e8\ud130\uc5d0\uc120 \ub418\uc9c0) \uc774\ubbf8 \ub9cc\ub4e4\uc5b4\uc9c4 \ubc14\uc774\ub108\ub9ac \ud30c\uc77c\uc744 \ub2e4\uc6b4\ubc1b\uc2b5\ub2c8\ub2e4.</p> <p>\ubcf4\uc548 \uacbd\uace0!</p> <p><code>@ridingtheflow</code>\ub2d8\uc774 \uc774 \ube4c\ub4dc\ub41c SiPolicy \ud30c\uc77c\uc774 \ubaa8\ub4e0 \ub4dc\ub77c\uc774\ubc84\ub97c \ud5c8\uc6a9\ud558\ub294 \ub0b4\uc6a9\uc774\ub77c\uace0 \uc54c\ub824\uc8fc\uc168\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0, SiPolicy\ub97c \ub2e4\uc6b4\ubc1b\ub294 \uac83 \uc790\uccb4\uac00 \uc704\ud5d8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. <code>New-CIPolicy</code>\ub85c SiPolicy\ub97c \ub9cc\ub4dc\ub294 \uac83\ub3c4 \uc704\ud5d8\ud560 \uc218 \uc788\ub294\ub370, \uae30\ubcf8\uc801\uc73c\ub85c <code>Event:Audit Mode</code>\ub77c\ub294 \ub514\ubc84\uae45\uc6a9 \ubaa8\ub4dc\uac00 \ucf1c\uc9c4 \uc0c1\ud0dc\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> <p>\uc774\uc81c <code>selfsign.bin</code>\uc744 \uc11c\uba85\ud574\uc57c \uc708\ub3c4\uc6b0\uc5d0\uc11c \uc815\uc0c1\uc801\uc73c\ub85c \uc778\uc2dd\ud558\uac8c \ub429\ub2c8\ub2e4.</p> <pre><code>signtool sign /fd sha256 /p7co 1.3.6.1.4.1.311.79.1 /p7 . /f platform-key/private.pfx /p &lt;# platform-key\uc758 \ube44\ubc00\ubc88\ud638 #&gt; sipolicy/selfsign.bin\n</code></pre> <ul> <li><code>platform-key/private.key</code>: platform key\uc758 \ube44\uacf5\uac1c \ud0a4 \uacbd\ub85c</li> <li><code>sipolicy/selfsign.bin</code>: \ubc14\ub85c \uc704\uc5d0\uc11c \ub2e4\uc6b4\ubc1b\uc740 \ud30c\uc77c</li> </ul> <p>\uc774\uc81c <code>selfsign.bin.p7</code>\uc774\ub77c\ub294 \ud30c\uc77c\uc774 \uc0dd\uacbc\uc744 \uac83\uc785\ub2c8\ub2e4. \ud30c\uc77c\uc758 \uc774\ub984\uc744 <code>SiPolicy.p7b</code>\ub85c \ubc14\uafd4\uc8fc\uc138\uc694. \uadf8 \ub2e4\uc74c \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \ud30c\uc6cc\uc178\uc744 \uc5f4\uace0(\uc774\ubbf8 \uad00\ub9ac\uc790 \uad8c\ud55c\uc774\uba74 \uc0c8\ub85c \uc5f4\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4.) \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc8fc\uc138\uc694.</p> <pre><code># EFI \uc2dc\uc2a4\ud15c \ud30c\ud2f0\uc158\uc744 X: \ub4dc\ub77c\uc774\ube0c\uc5d0 \ub9c8\uc6b4\ud2b8\nmountvol x: /s\n\n# SiPolicy \ubcf5\uc0ac\ncp SiPolicy.p7b X:\\EFI\\Microsoft\\Boot\\\n\n# (\uc548\ud574\ub3c4 \uc0c1\uad00\uc740 \uc5c6\uc74c?) EFI \ubcfc\ub968 \ub9c8\uc6b4\ud2b8\ud574\ub480\ub358\uac70 \ucde8\uc18c\ud558\uae30\nmountvol x: /d\n</code></pre>"},{"location":"other/windows-self-driver-signing/#custom-kernel-signercks","title":"Custom Kernel Signer(CKS) \ucf1c\uae30","text":"<p>CKS\ub77c\ub294 \uc774 \uac12\uc740 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc758 <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions</code>\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4\uace0 \ud569\ub2c8\ub2e4. \uc774 \uac12\uc740 \uc0ac\uc2e4\uc0c1 \ucee4\ub110 \ucd08\uae30\ud654\uac00 \ub05d\ub098\uc9c0 \uc54a\uc558\uc744 \ub54c\uc5d0\ub9cc \uc124\uc815\ud560 \uc218 \uc788\ub294\ub370\uc694, \uc790\uc138\ud55c \uc6d0\ub9ac\ub294 \uc6d0\ubcf8 \ubb38\uc11c\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc800\ub294 \ubc29\ubc95\ub9cc \uac04\ub2e8\ud558\uac8c \uc124\uba85\ud560\uac8c\uc694.</p> <p>\uc6b0\uc120 \uc774 url\ub85c \ub4e4\uc5b4\uac00\uc11c ssde.zip\uc744 \ubc1b\uc544\uc8fc\uc138\uc694. \uac70\uae30 \uc548\uc5d0 \ubcf4\uba74 ssde.sys\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub4dc\ub77c\uc774\ubc84\ub97c \uc11c\uba85\ud574\uc904 \uac74\ub370\uc694, \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc8fc\uc138\uc694.</p> <pre><code>signtool sign /fd sha256 /a /ac root-ca/cert.cer /f kernel-mode-driver/private.pfx /p &lt;\ube44\ubc00\ubc88\ud638&gt; /td sha256 /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp ssde.sys\n</code></pre> <p>\ud639\uc2dc \ucef4\ud4e8\ud130\ub97c \ub2e4\uc2dc \ubabb \ucf24\uae4c\ubd10 \ub450\ub824\uc6b0\uc2e0 \ubd84\ub4e4\uc740 WinPE(Windows Preinstalled Environment)\ub97c \uc124\uc815\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ub4dc\ub9bd\ub2c8\ub2e4. \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud55c \ud6c4\uc5d0\ub294 \uc708\ub3c4\uc6b0 \uc785\uc7a5\uc5d0\uc11c ssde.sys\uac00 \uc54c \uc218 \uc5c6\ub294 \uc778\uc99d\uc11c\ub85c \uc11c\uba85\ub418\uc5c8\ub294\ub370, \ucee4\ub110 \ub4dc\ub77c\uc774\ubc84\ub77c\uc11c \uc2e4\ud589\uc744 \ubabb\ud558\uc5ec\uc11c Kernel fault\ub97c \uc77c\uc73c\ud0a4\uac8c \ub429\ub2c8\ub2e4. \uc989 \ube14\ub8e8\uc2a4\ud06c\ub9b0\uc774 \ub728\uac70\ub098 \ubcf5\uad6c \ud658\uacbd\uc73c\ub85c \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. \ubcf5\uad6c \ud658\uacbd\uc73c\ub85c \ub4e4\uc5b4\uac08 \uc218 \uc788\ub2e4\uba74 \ub2e4\ud589\uc774\uace0, \uc544\ub9c8 \ub4e4\uc5b4\uac00\uc9c8 \uac81\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub9cc\uc57d \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc2dc \ucef4\ud4e8\ud130\ub85c \ubd80\ud305\ud560 \uc218 \uc5c6\uc744\uc9c0\ub3c4 \ubaa8\ub974\ub2c8\uae4c\uc694? \ubb50 \uadfc\ub370 \uc544\ub9c8 \ub420\uac70\uc5d0\uc694?</p> <p>\uc774\uc81c \ub4dc\ub514\uc5b4 \uc801\uc6a9\ud560 \uc2dc\uac04\uc785\ub2c8\ub2e4. \uc704\uc5d0\uc11c \uc11c\uba85\ud55c ssde.sys\ub97c \uc124\uce58\ud574\uc904 \uac81\ub2c8\ub2e4. \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uad00\ub9ac\uc790 \uad8c\ud55c \ud30c\uc6cc\uc178\uc5d0\uc11c \uc2e4\ud589\ud574\uc8fc\uc138\uc694. (cmd\ub77c\uba74 <code>$env:windir</code>\uc744 <code>%windir%</code>\ub85c \ubc14\uafb8\uba74 \ub429\ub2c8\ub2e4.)</p> <pre><code>cp ssde.sys $env:windir\\system32\\drivers\\ssde.sys\nsc.exe create ssde binpath=$env:windir\\system32\\drivers\\ssde.sys type=kernel start=boot error=normal\n</code></pre> <p>\ud639\uc2dc\ub098 \uc544\ub798\uc5d0 \uc788\ub294 \ub2e8\uacc4\ub97c \ud558\ub2e4\uac00 \ubb34\uc5b8\uac00 \uc548\ub3fc\uc11c \uc6d0\ub798\ub300\ub85c \ub418\ub3cc\ub9ac\ub824\uba74 \ubcf5\uad6c\ubaa8\ub4dc \uba85\ub839 \ud504\ub86c\ud504\ud2b8\uc5d0\uc11c \uadf8\ub0e5 <code>C:\\Windows\\System32\\drivers\\ssde.sys</code>\ub97c \uc0ad\uc81c\ud558\uba74 \uc6d0\ub798\ub300\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4. \ud639\uc2dc UEFI \uc124\uc815\uc5d0\uc11c PK\ub97c \ucd08\uae30\ud654\ud588\ub2e4\ub358\uac00 \ucef4\ud4e8\ud130 \uc124\uc815\uc744 \ubc14\uafb8\ub2e4\uac00 \ucd08\uae30\ud654\ub418\uba74 \ubd80\ud305\uc774 \uc815\uc0c1\uc801\uc73c\ub85c \uc548 \ub420\uc218\ub3c4 \uc788\ub294\ub370 \uadf8\ub54c \uc774 \ubc29\ubc95\uc744 \uc4f0\uba74 \ub3fc\uc694.</p> <p>\uc544\ub798 \ubd80\ubd84\uc740 \uc885\uc774\uc5d0 \uc801\uc5b4\ub193\uac70\ub098 \ud734\ub300\ud3f0\uc73c\ub85c \ubcf4\uc2dc\ub294 \uac78 \ucd94\ucc9c\ub4dc\ub9bd\ub2c8\ub2e4. \uc774\uc81c \ucef4\ud4e8\ud130\ub97c \uc7ac\ubd80\ud305\ud558\uba74 \uc544\ub9c8 \ud3c9\uc18c\uc640 \ub2e4\ub974\uac8c \ube14\ub8e8\uc2a4\ud06c\ub9b0\uc774 \ub728\uac70\ub098 '\uc2dc\uc2a4\ud15c \ubcf5\uad6c \uc911' \uac19\uc740 \uc2dd\uc73c\ub85c \ub728\ub2e4\uac00 \ub2e4\ub978 \ucc3d\uc73c\ub85c \ub118\uc5b4\uac08\uac70\uc5d0\uc694. \uc774\uac83\uc740 \ubd80\ud305\uc774 \uc2e4\ud328\ud588\uace0 \ucee4\ub110 \ud328\ub2c9\uc774 \uc77c\uc5b4\ub0ac\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4.  </p> <p>\uc790\ub3d9 \ubcf5\uad6c\uc5d0\uc11c PC\ub97c \ubcf5\uad6c\ud558\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4.</p> <p>\uc774\uc81c \uc774 \ubd80\ubd84\uc5d0\uc11c \uace0\uae09 \uc635\uc158\uc73c\ub85c \ub4e4\uc5b4\uac00\uace0, \ubb38\uc81c \ud574\uacb0 &gt; \uace0\uae09 \uc635\uc158 &gt; \uba85\ub839 \ud504\ub86c\ud504\ud2b8\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4. \uacc4\uc815\uc744 \uc120\ud0dd\ud558\uace0 \ube44\ubc88\uc744 \uc785\ub825\ud558\uba74 cmd \ucc3d\uc774 \ub730\uac81\ub2c8\ub2e4. \uc5ec\uae30\uc11c <code>regedit</code>\uc744 \uc785\ub825\ud558\uba74 \ub808\uc9c0\uc2a4\ud2b8\ub9ac \ud3b8\uc9d1\uae30\uac00 \ub739\ub2c8\ub2e4. <code>HKEY_LOCAL_MACHINE</code>\uc744 \uc120\ud0dd\ud55c \ub2e4\uc74c <code>\ud30c\uc77c(F)</code> &gt; <code>\ud558\uc774\ube0c \ub85c\ub4dc(L)...</code>\uc744 \ub204\ub974\uace0 \uc708\ub3c4\uc6b0\uac00 \uc124\uce58\ub41c \uacbd\ub85c\uc5d0\uc11c (\ubcf4\ud1b5 <code>C:/Windows</code>, \ubcf5\uad6c\ubaa8\ub4dc\uc5d0\uc120 \ub2e4\ub978 \ub4dc\ub77c\uc774\ube0c\uc5d0 \ub9c8\uc6b4\ud2b8\ub410\uc744 \uc218\ub3c4 \uc788\uc5b4\uc694) <code>System32 &gt; config &gt; SYSTEM</code>\uc744 \uc5f4\uc5b4\uc11c \uc544\ubb34 \uc774\ub984 \uc785\ub825, \ud655\uc778\uc744 \ub204\ub985\ub2c8\ub2e4. \uadf8\ub7fc <code>HKEY_LOCAL_MACHINE</code> \uc544\ub798\uc5d0 \ud574\ub2f9 '\uc544\ubb34 \uc774\ub984'\uc774\ub77c\ub294 \ud0a4\uac00 \ub730\uac70\uc5d0\uc694.</p> <p>\ud574\ub2f9 \ud0a4\uc5d0\uc11c <code>ControlSet001</code> &gt; <code>Control</code> &gt; <code>CI</code> &gt; <code>Protected</code>\uc5d0 \ubcf4\uba74 <code>Licensed</code>\ub77c\ub294 \uac8c \ubcf4\uc77c \uac70\uc5d0\uc694. \ub354\ube14\ud074\ub9ad\ud574\uc11c \uae30\uc874\uc758 \uac12 0\uc744 1\ub85c \ubc14\uafb8\uace0 \ud655\uc778\uc744 \ub20c\ub7ec\uc90d\ub2c8\ub2e4.</p> <p> \uc774\ub807\uac8c\uc694.</p> <p>\uc774\uc81c \ud560 \uc77c\uc744 \ub05d\ub9c8\ucce4\uc2b5\ub2c8\ub2e4. \ub808\uc9c0\uc2a4\ud2b8\ub9ac \ud3b8\uc9d1\uae30\uc640 cmd \ucc3d\uc744 \ub2eb\uace0 \ub2e4\uc2dc \ubd80\ud305\uc744 \ud558\uba74 \uc544\ub9c8 \uc815\uc0c1\uc801\uc73c\ub85c \ub420 \uac70\uc5d0\uc694. \uc774\uc81c ssde.zip\uc744 \ud480\uc740 \ud3f4\ub354\uc5d0 \ubcf4\uba74 ssde_info.exe\ub77c\ub294 \ud504\ub85c\uadf8\ub7a8\uc774 \uc788\ub294\ub370 cmd\ub098 \ud30c\uc6cc\uc178\uc5d0\uc11c \uc2e4\ud589\uc2dc\ucf1c \uc8fc\uc138\uc694. \ubb34\uc5b8\uac00 \uc624\ub958\uac00 \uc544\ub2cc \uac83\ucc98\ub7fc \uc0dd\uae34 \uac8c \uc544\ub798\ucc98\ub7fc \ub728\uba74 \uc131\uacf5\uc785\ub2c8\ub2e4.</p> <p><pre><code>API version is 1.1\nArm count is 2\nArm watchdog status is 1\nLicense tamper state is 0\n</code></pre> \uc774 \ub4dc\ub77c\uc774\ubc84\ub3c4 \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 \uc778\uc99d\uc11c\ub85c \uc11c\uba85\ud588\uae30 \ub54c\ubb38\uc5d0, \uc815\uc0c1\uc801\uc73c\ub85c \uc2e4\ud589\ub410\ub2e4\uba74 \uac70\uc758 \ub2e4 \ub05d\ub0ac\uc2b5\ub2c8\ub2e4.</p> <p>\uc774\uc81c \ucef4\ud4e8\ud130\ub97c \ub2e4\uc2dc \uc2dc\uc791\ud574 \ubcf4\uc138\uc694. '\uc790\ub3d9 \ubcf5\uad6c\uc5d0\uc11c PC\ub97c \ubcf5\uad6c\ud558\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4.'\uac00 \ub2e4\uc2dc \ub730 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc548\ub72c\ub2e4\uba74 \uc815\uc0c1\uc801\uc73c\ub85c \ub05d\ub09c \uac83\uc774\uace0, \ub9cc\uc57d \ub72c\ub2e4\uba74 \uc704\uc5d0 \uc124\uba85\ud55c \uac83\uc744 \ub2e4\uc2dc \uc2e4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4.</p> <p>\uc218\uace0\ud558\uc168\uc5b4\uc694. \ud544\uc694\ud558\ub2e4\uba74 UEFI\uc5d0\uc11c Secure Boot Mode\ub97c \uc6d0\ub798\ub300\ub85c \ub3cc\ub824\ub193\uc544\ub3c4 \ub429\ub2c8\ub2e4. (PK\ub97c \uc124\uc815\ud558\uae30 \uc704\ud574 \uc7a0\uc2dc \ubc14\uafd4\ub1a8\uc5c8\uc8e0)</p> <p>\ucd94\uac00: \uc0c8\ub85c \uc0b0 \ub178\ud2b8\ubd81\uc5d0\uc11c \ud588\uc744\ub54c\ub294 \uc774 \ubc29\ubc95\uc774 \uc798 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc11c\ube44\uc2a4 \uc124\uce58\ub97c \ud55c \ud6c4, ssde_enable.exe\ub97c \uc2e4\ud589\ud574\uc11c \uc124\uc815\ud574\ub193\uc740 \ub2e4\uc74c \ub2e4\uc2dc \uc2dc\uc791 -&gt; \ubcf5\uad6c\ubaa8\ub4dc \uc9c4\uc785 -&gt; \ub808\uc9c0\uc2a4\ud2b8\ub9ac \ud3b8\uc9d1 -&gt; \ub2e4\uc2dc \uc2dc\uc791 -&gt; (cmd\ucc3d \ub738, \uc790\ub3d9\uc73c\ub85c \uc124\uc815)\uc758 \uacfc\uc815\uc744 \uac70\uce58\ub2c8 \uc798 \uc791\ub3d9\ud558\ub354\ub77c\uace0\uc694.</p>"},{"location":"other/windows-self-driver-signing/#_6","title":"\ucc38\uace0","text":"<p>\uae30\ubcf8\uc801\uc73c\ub85c \ucc38\uace0\ud55c \ubb38\uc11c:</p> <ul> <li>\uc548\uc815\uc801\uc778 \ubc29\ubc95: valinet/ssde</li> <li>\ucd5c\ucd08\ub85c \uc131\uacf5\ud55c \uc0ac\ub840: HyperSine/Windows10-CustomKernelSigners</li> <li>\uc6d0\ubcf8 PoC: Licensed Driver Signing in Windows 10</li> </ul> <p>\uc870\uae08 \uc720\uc6a9\ud55c \ubb38\uc11c\ub4e4:</p> <ul> <li>\ubbf8\uad6d \uad6d\ubc29\ubd80\uc5d0\uc11c Secure Boot\uc5d0 \uad00\ud574 \uc4f4 \uae00</li> </ul>"}]}